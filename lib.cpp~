#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <valarray>
#include <fstream>
#include <strstream>
#include <string>
#include <sstream>



//include per il mac
/*
g++ analysis_1.cpp -llapack  -lgsl -lcblas -lm -O3 -Wno-deprecated -I/usr/local/include/gsl/ -I ./ -o analysis_1.o -Wall -DHAVE_INLINE
./analysis_1.o -L 1024 -B 128        
*/

#include <gsl_rng.h>
#include <gsl_randist.h>
#include <gsl_vector.h>
#include <gsl_matrix.h>
#include <gsl_eigen.h>
#include <gsl_blas.h>
#include <gsl_sf_pow_int.h>
#include <gsl_sf_exp.h>
#include <gsl_errno.h> 
#include <gsl_math.h> 
#include <gsl_roots.h>
#include <gsl_complex.h>
#include <gsl_complex_math.h>

using namespace std;

#define my_precision 4


int main(int argc, char *argv[]){
	
  unsigned long long int  B, i, j, L, N, *dN1, *dN2, N_1, N_2;
  double N1, N2, y = 1., *p1, *p2, x,  *phi0, *phi1, beta1 = 1.e4, alpha1, alpha2, alpha0 = 1., a0c0s, a0c0, a1c0, a2c1, b1c1, w = 0.5*1.e1;
  strstream ins;
  string line;
  stringstream file_input, file_output;
  ifstream input;
  ofstream outfile;
  int options;

  while ((options = getopt(argc, argv, ":L:B:")) != -1) {
		
    switch (options) {

    case 'L':
      L = (unsigned long long int) atoi(optarg) ;
      break;

    case 'B':
      B = (unsigned long long int) atoi(optarg) ;
      break;

    }
		
  }

  N = L-1;
  dN1 = new unsigned long long int [N];
  dN2 = new unsigned long long int [N];
  phi0 = new double [N];
  phi1 = new double [N];
  p1 = new double [B];
  p2 = new double [B];

  cout.precision(my_precision);
  outfile.precision(my_precision);
  
  file_input << "draw_L" << L << ".dat";
  file_output << "draw_an_L" << L << ".dat";

  input.open(file_input.str().c_str());

  if(!input){
    cout << "Error opening file."  << endl;
    flush(cout);
  }
 
  getline(input,line);

  for(N_1 = 0, N_2 = 0, i=0; i<N; i++){

    line.clear();
    ins.clear();
    getline(input,line);
    ins << line;
    ins >> j >> dN1[i] >> dN2[i] >> phi0[i] >> phi1[i];
    N_1 += dN1[i];
    N_2 += dN2[i];

    // cout << "\n" << phi1[i];

  }

  input.close();

  alpha1 = 12.*w*2.*M_PI/(6.022*3.)*((double)L)*(((double)L)-1.)*(2.*((double)L)-1.) * (1.+y)/(((double)N_1)+y*(double)N_2);
  alpha2 = y * alpha1;

  a0c0s = 4./3.*M_PI*gsl_pow_3((double)L)*alpha0;

  for(a0c0 = 0., a2c1=0., b1c1=0., a1c0= 0.,  i=0; i<N; i++){
    a0c0+=phi0[i]*((double)(i+1));
    a1c0+=((double)dN1[i])*phi0[i]/((double)(i+1));
    a2c1+=((double)dN2[i])*phi1[i]/((double)(i+1));
    b1c1+=phi1[i]*((double)(i+1));
  }

  a0c0*=alpha0*4.*M_PI;
  a2c1*=alpha2;
  a1c0*=alpha1;
  b1c1*=beta1*4.*M_PI;
    
  cout << "\nEnzyme 1 number = " << N_1 << "\t Enzyme 2 number = " << N_2;
  cout << "\nFraction of non-processed S0 = " << a0c0/a0c0s << "\tFraction of processed S0 = " << a1c0/a0c0s << "\tSum = " << a0c0/a0c0s  + a1c0/a0c0s;
  cout << "\nFraction of decaying S1 = " << b1c1/a1c0 << "\tFraction of processed S1 = " << a2c1/a1c0 << "\tSum = " << b1c1/a1c0  + a2c1/a1c0;
  cout << "\nTotal flux / Total production = " << a2c1/a0c0s;
  
  outfile.open(file_output.str().c_str());
  
  for(N1 = 0., N2 = 0., i=0; i<B; i++){

    x = (0.5+(double)i)/(double)B;

    for(j=0; j<N; j++){
      if(( abs(((double)(j+1))/((double)L) - x) < 0.5/(double)B )){p1[i]+= dN1[j]; p2[i]+= dN2[j];}
    }

    N1+=p1[i];
    N2+=p2[i];
  }

  for(x = 0., i=0; i<B; i++){
    p1[i]*=1./N1*(double)B;
    p2[i]*=1./N2*(double)B;
    outfile << "\n" << (0.5+(double)i)/(double)B << "\t" << p1[i] << "\t" << p2[i];
  }


  delete [] dN1;
  delete [] dN2;
  delete [] phi0;
  delete [] phi1;
  delete [] p1;
  delete [] p2;


  outfile.close();
  cout << "\n";
  return(0);
	
}
