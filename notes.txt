 
 notes:
    -       //example of a lambda!
            CallAfter(
                      [  ] (  ) -> void
                      {
                          cout << "Lambda ! \n";
                      }
                      );
             
    - to remove background on PNG images use https://www.photoroom.com/tools/background-remover
    - if you get an error message ' Use of undeclared identifier 'ToDIP' ' it is because the ToDIP method belongs to the wxwindow class, thus you need to call [some wxWindow].ToDIP(...)
	- remember that  of Routes do not go through the points of Routes exactly, see https://docs.wxwidgets.org/latest/classwx_d_c.html#ad72d38c75ac6b3f80c1f957dd94089fa
	- a common error is that when you need to compute the arithmetic mean of two latitudes phi_1 and phi_2, you should *not* do (phi_1+phi_2)/2 but ((phi_1.normalize_pm_pi_ret().value) + (phi_2.normalize_pm_pi_ret().value))/2
    - declare progress dialogs on the heap (i.e., not as wxProgressDialog* progress_dialog; progress_dialog = new ...,) but on the stack (i.e., as  wxProgressDialog progress_dialog([constructor arguments])). This is because if you declare them on the heap, the progress dialog will stay forever open and it will prevent the app from closing. On the other hand, if you declare it on the stack , it will be destroyed authomatically once the method that calls it stops running
    - be careful when you debug with breakpoints stuff that include timers ! You may stop at a breakpoint, but the timer in the code has started running and is running while you are stopped at the breakpoint
    - to use a lambda capture with CallAfter: `CallAfter([=] {FillAndRaiseOtherFrame();});`
    - the folder where Xcode builds the app is   /Users/michelecastellana/Library/Developer/Xcode/DerivedData/minimal_cocoa-aaxuwbexostgarbglusbwfoanlsj/Build/Products/Debug/minimal_cocoa.app/Contents/MacOS/../../  
    - on APPLE:
    - on APPLE:
        - replace SetMercatorAndNormalize whenever you can
        - the cmd (apple) key corresponds to WXK_CONTROL
         - to setup everything:
                1. Download and install boost_1_83_0 from https://www.boost.org/users/history/version_1_83_0.html
                2. Download and install gsl (gnu scientifc library) from https://www.gnu.org/software/gsl/
                3. Download and install wxWidgets from https://www.wxwidgets.org/downloads/
                4. Open wxWidgets-xxx/build/osx/wxcocoa.xcodeproj/ with Xcode and build it
                5. Open  /Applications/wxWidgets-XXX/samples/minimal/minimal_cocoa.xcodeproj/
                    * remove minimal.cpp, click on 'minimal_cocoa' with the blue icon on its left, then 'build phases' -> 'compile sources' -> add main.cpp and all .cpp files in src/
                    * select app-dynamic -> add /usr/local/include/gsl/ /usr/local/include/ /Applications/boost_1_83_0/ /Applications/wxWidgets-x.x.x/build/osx/setup/cocoa/include/ and /Applications/wxWidgets-xxx/include/ and /Users/michelecastellana/Documents/thelemacus/include/ to 'User header search path' (you need to split this in multiple lines when you add)
                    * select app-dynamic -> add -lgsl -lcblas -lboost_filesystem -lboost_system to 'Other linker flags' (you need to split this in multiple lines when you add)
                    * select app-dynamic -> add '/Applications/boost_1_83_0/stage/lib/' (/Applications/boost_1_86_0/universal) to 'Runpath search paths' and to 'Library Search Paths'
                    * select app-dynamic -> add '/usr/local/lib' to Library Search Paths
                    * select app-dynamic  set 'Always search user paths (deprecated)' to 'Yes'
                    * set Product -> scheme -> app-dynamic
                6. Add all necessary paths by adding, say, 'export PATH="/Applications/wxWidgets-3.2.4/build-cocoa-debug:$PATH"' to ~/.zprofile
                7. To make breakpoints in included files to work in Xcode, create file  ~/.lldbinit and write in it 'settings set target.inline-breakpoint-strategy always'
                8. To build the app with make_app.sh:
                    * download the libpng library from https://sourceforge.net/projects/libpng/
        - to build wxWidgets in order to build Thelemacus with ./make_app.sh:
                * unzip wxWidgets-xxxx.tar.gz in, say, wxWidgets-3.2.2
                * cd  wxWidgets-3.2.2
                * mkdir my_build
                * cd my_build
                * ../configure
                * make
                * sudo make install
        - to build a sample:
                * unzip wxWidgets-xxxx.tar.gz in, say, wxWidgets-3.2.2
                * cd  wxWidgets-3.2.2
                * mkdir my_build
                * cd my_build
                * ../configure
                * make
                * sudo make install
                * cd samples/
                * cd [name of the sample that you want to build, e.g. `calendar`]
                * make
        - to build boost library for both arm64 and x86_64 architectures:
                * download boost_1_86_0 from https://www.boost.org/users/download/
                * unzip boost_1_86_0.tar.gz into, say, /Applications/boost_1_86_0
                * copy build_boost_universal.sh into /Applications/boost_1_86_0
                * cd /Applications/boost_1_86_0
                * ./build_boost_universal.sh
                * the libaries for both architectures will be in /Applications/boost_1_86_0/universal
        - to build gsl library for both arm64 and x86_64 architectures:
                * download gsl-latest.tar.gz
                * unzip it in, say, /Applications/gsl-2.8
                * cd into, say, /Documents/michelecastellana/thelemacus
                * $sudo ./build_gsl.sh /Applications/gsl-2.8 /Users/michelecastellana/Desktop
                * the libaries for both architectures will be in /usr/local/lib

     - on WIN32:
            - remember that the command ((chart_frames[i])->draw_panel)->FitAll(); makes a flash because it obliges the program to re-initialize from scratch the chartframe, avoid it!
            - whenever you add a new .cpp and .h file, remember to add it in 'Source Files' in the Visual Studio file, e.g., C:\wxWidgets-3.2.4_debug\samples\minimal\minimal_vc17.sln
            - to read sample_sight.nav from an actual file on disk rather than from WIN32 resources
                * select "Case 2" in 'Fork ...' in lib.cpp -> the .exe file will look for sample_sight.nav in the folder [folder where .exe file is executed]/Contents/Resources/Data/
                * put the .exe file in sight_reduction_program folder -> the .exe file will find the sample_sight.nav file in sight_reduction_program/Contents/Resources/Data/
            - to recognize what character key has been pressed, do (event.GetUnicodeKey()) and check if it is equal to, sai, 'A', not 'a'
            - if you press control key on runtime from within Visual Studio, it will not be detected as WXK_CONTROL, while if you run the exe file from system resources it does.
            - keep the output directory as $(wxIntRootDir) : if you set it to Z:\ the program will not run
            - if there is an odd error 'memory leak', this may be because the sample_sight.nav file presents some corrupted charcters (e.g. infinity sign instead of degree sign). To fix it: remplace Contents/Reources/Data/sample_sight.nav with Contents/Resources/Data/sample_sight_saved.nav
             - error message on WIN32 for intellisense "Severity    Code    Description    Project    File    Line    Suppression State    Details
             Error (active)    E2924    PCH warning: header stop cannot be in a macro or #if block.  An IntelliSense PCH file was not generated.    base    C:\wxWidgets-3.2.4_debug\include\wx\any.h    25" line of error "// Size of the wxAny value buffer.
             enum
             {
                 WX_ANY_VALUE_BUFFER_SIZE = 16
             };" in any.h
            - if you allocate 13387 MB of Base Memory, it runs by clicking on the .exe and with coastlines = y
             - to set up everything on Windows 10/11:
                     0. With Virtual Box, set up a partition with Windows 10. In the partition, set 2 cores, 13387 MB of base memory, set 'Shared Clipboard' to 'Bidirectional', install 'Guest Additions' and share the folder, say, sight_reduction_program, containing main.cpp, main.h, lib.cpp, lib.h, constants.h etc. Set up 100 GB of disk on the partition, and set it to pre-allocated.
                     0b. With Parallels Desktop, set up a Windows virtual machine with at least 8GB of memory
                     1. Install WinZip
                     2. Istall MinGW : download mingw-get-setup from https://sourceforge.net/projects/mingw/
                     3. Install Visual Studio: download VisualStudioSetup from https://visualstudio.microsoft.com/downloads/
                     4. Istall wxWidgets: download wxMSW-3.2.4-Setup.exe from https://wxwidgets.org/downloads/ and install it in, say,  C:\wxWidgets-3.2.4_debug\
                     5. Open  C:\wxWidgets-3.2.4_debug\build\msw\wx_vc17.sln with Visual studio -> select all packages in the right panel of the screen (adv, aui, ...., xml, xrc but not _custom_build) -> right click -> properties -> C/C++ -> Code Generation -> Runtime library -> Select 'Multi-threaded Debug (/MTd)') and build (not run!) (you may get an error the first time you build, just build multiple times and the error will disappear)
                     6. Open   C:\wxWidgets-3.2.4_debug\samples\minimal\minimal_vc17.sln -> select all packages -> right click -> properties -> C/C++ -> CodeGeneration -> Runtime library -> Select 'Multi-threaded Debug (/MTd)'). Replace all existing files from Source files  main.cpp and src/*.cpp, replace all existing Resource files with resource_file_winsows.rc.
                     7. Install gsl:
                        * download gsl-1.16.tar.gz from https://ftp.gnu.org/gnu/gsl/ and unzip it in, say, C:/gsl-1.16
                        * download gnu-gsl-for-windows-master.zip from https://github.com/ahmadyan/gnu-gsl-for-windows/tree/master
                        * follow the instructions in https://github.com/ahmadyan/gnu-gsl-for-windows/blob/master/build.vc11/gsl.vc11.readme.txt, i.e.:
                            - unzip the content of gnu-gsl-for-windows-master.zip into  C:/gsl-1.16 (answer yes when asked whether you should overwrite some files)
                            - you should have a folder C:\gsl-1.16\build.vc11
                            - open  C:\gsl-1.16\build.vc11\gsl.lib.sln with Visual Studio
                              * go to project -> properties -> C/C++ -> code generation -> runtime library -> select 'Multi-threaded Debug (/MTd)'
                              * go to project -> properties -> configuration properties -> VC++ directories -> include directories -> add 'C:\gsl-1.16\'
                              * click on 'gslhdrs' in the right panel and build it
                              * select on 'gsllib' and 'cblaslib' in the right panel and build them
                        * the GSL library will be installed in, say, C:\gsl-1.16\gsl (header files) and in C:\gsl-1.16\lib\x64\Debug\ (lib files)
                     8: Install boost libary:
                        x Potential solution 1:
                            * download boost_1_66_0.zip from https://www.boost.org/users/history/version_1_66_0.html
                            * unzip boost_1_66_0.zip into, say, C:\boost_1_66_0
                            * in the MS Windows search bar type 'x64' -> 'x64 Native Tools Command Prompt ... ' app will appear -> open it and go to C:\boost_1_66_0
                            * do 'bootstrap.bat'
                            * do 'b2.exe variant=debug link=static runtime-link=static runtime-debugging=on address-model=64 architecture=x86 --with-filesystem --with-date_time'
                            * rename, file by file, 'C:\boost_1_66_0\stage\lib\*vc*.lib' -> 'C:\boost_1_66_0\stage\lib\*vc141*.lib'
                        x Potential solution 2:
                            * download boost_1_86_0.zip from https://www.boost.org/users/download/
                            * unzip boost_1_86_0.zip into, say, C:\boost_1_86_0
                            * in the MS Windows search bar type 'x64' -> 'x64 Native Tools Command Prompt ... ' app will appear -> open it and go to C:\boost_1_86_0
                            * do 'bootstrap.bat'
                            * do 'b2.exe variant=debug link=static runtime-link=static runtime-debugging=on --with-filesystem --with-date_time'
                     9. Open C:\wxWidgets-3.2.4_debug\samples\minimal\minimal_vc17.sln with Visual Studio:
                         * Go to  project  -> minimal properties -> configuration properties -> linker -> input -> additional dependencies and add C:\gsl-1.16\lib\x64\Debug\gsl.lib and  C:\gsl-1.16\lib\x64\Debug\cblas.lib
                         * go to project -> properties -> configuration properties -> VC++ directories -> include directories, add 'C:\boost_1_xx_0' , 'C:\gsl-1.16\' and 'C:\gsl-1.16\gsl' and 'C:\Mac\Home\Documents\thelemacus\include'
                         * go to project -> properties -> Configuration properties -> VC++ directories -> library directories -> add  'C:\boost_1_xx_0\stage\lib'
                         * go to project -> properties -> configuration properties -> general -> C++ language standard  and set ISO C++20 Standard (/std:c++20)
                         * go to project -> properties -> configuration properties -> C/C++ -> preprocessor -> preprocessor definitions -> add '_HAS_STD_BYTE=0'
                         * go to project -> properties -> configuration properties -> general -> set target name to, say, 'Thelemacus_debug'
                     10. Update the paths of the resource files in resource_file_windows.rc
     - sometimes the drag operation with mercator projection ends up to the original positon because you end up hitting the max min latitude when dragging
     - to make the app executable: $chmod +x /Thelemacus.app/Contents/MacOS/Thelemacus
     - to watch a variable any time it changes value, 1. set a breakpoint 2. in the lldb console type watch set variable MyClass.variable_in_the_class 3. Press play again.
     - when a new chartframe is created, call ShowCharts to re-arrange all chartframes.
     - when a new chartframe is created, position it so it is not hidden by the menu bar on top of the screen
     - per creare un progetto xcode con wxwidgets 1. decomprimi il tar.gz di wxwidgets 2. in samples/minimal/ modifical minimal_cocoa mettendoci i files C++ e le referenze in system header search path, library search path, le linking flag, etc.
     - se xcode ti crea nuove copie dei file .cpp e .h quando li aggiungi a un progetto, fai attenzione a deselezioare 'copy items if needed' nel momento in cui li aggiungi al progetto. Non mettere i file in /src/, altrimenti xcode ti crea una copie di quei file nella directory in cui si trova il file .xcodeproj
 
 
 
 
 ********** THINGS TO ADD/IMPROVE ************
     - in template<class T, class F_A, class F_B, class F_ABORT> template<class E> void QuestionFrame<T, F_A, F_B, F_ABORT>::KeyDown(E& event) do not call the methods with the dummy event, but on the event which is argument of template<class T, class F_A, class F_B, class F_ABORT> template<class E> void QuestionFrame<T, F_A, F_B, F_ABORT>::KeyDown(E& event)
     - add instrumental error
     - add readme file
     - add human error in sight frame to account for a systematic human error in estimating the moment when the body touches the horizon
     - add the possibility to add a poisition witch which to compare the distance when entering a sight
     - code method DrawPanel::ProjectionToGeo_3D
     - code the remainign parts of Route::set_length for orthodromes and, eventually, circles of equal altitude
     - handle light/dark mode on WIN32 (you will need to activate WIN32 for this) and create resources for images in the /Dark/ folder and write the WIN32 part of void MyApp::OnTimer
     - center name of file in top bar of ListFrame
     - when I enter an invalide value in a (for example) AngleField and the error message is prompted and I click ok -> make sure that the focus is set to the field so the user can directly correct its value
     - when switching to dark mode, buttons with images must have white and black inverted -> adjust color of PNG images according to app color
     - add + / - button in chartframe to zoom in / out
     - move all constants to the init file , such as  the 0.15 in  'position_plot_area = wxPoint((size_chart.GetWidth())*0.15, (size_chart.GetHeight())*0.1);'
     - add lambert projection and 3D sphere with no projection
     - set up output to a log file
     - when one tries to drag a route , ask the user whether he wants to disconnect it from the sight by allowing no for an answer
     - in DrawPanel::draw_3D : when drawing minor ticks on the x axis : because I am drawing a loxodrome, I am using the old function Route::draw -> replace this with Route::draw_3D in the future
     - move all stuff which is general enough in the code to MyApp class
     - try  wxDCClipper to quickly delete old image on DrawPanel
     - add separator between recent items and non-recent items in BodyField->name
     - replace all 'projection_field->name->GetValue()) == wxString(((Projection_types[0]).value))' with a switch case find_in_... with
        '''
        switch (position_in_vector(parent->projection, Projection_types)) {

            case 0: {

                break;

            }

            case 1: {

                break;

            }

        }
        '''
     -  condense common parts of  'Draw(unsigned int, DrawPanel*, vector< vector<wxPoint> >*, String);' and of 'Draw(unsigned int, DrawPanel*, vector<unsigned long long int>*, vector<wxPoint>*, String prefix)'
     - check if in init.txt you can remove 'index error = 0° 1.9''
     - in DrawPanel::OnMouseMovement, try to use the HighlightObject functor by replacign with it multiple lines of code that are already present in DrawPanel::OnMouseMovement
     - DrawPanel::reference_positions_route_list may be get rid of, and you may use instead ListFrame::data->route_list[i].reference_position
     - write put_back_in , put_back)_in_Mercator and put_back_in_3D :



 ********** THINGS TO FIX ***********
 on OSX:
 on WIN32:
    - dark mode is not recognized
