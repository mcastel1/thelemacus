reset 

#notes:
#to kill all gnuplot processes type: pkill -9 gnuplot
#- using webgeocals improves agreement between circle of equal altitude and true position by ~ 100 m
#do not use stellarium to compute hour angle and declination: they are calculated with the reference frame sitting on the surface of the earth at the observer's location! 
#here 0 <= lambda < 360.0, and it grows in the W direction
#notes
K = 360.0/(2.0*pi);
k = 1.0/K;
N = 6.0;
#circles of equal altitude are plotted with S points
S = 1e4;
n_points_coastline = 200000;
epsilon=1e-10
myint(x) = x>0.0 ? int(x) : int(x)-1.0
clint(x) = abs(x-myint(x))<abs(x-(myint(x)+1.)) ? myint(x) : myint(x)+1.
#extracts degrees and minutes from floating-point angle in degree format
degrees(x) = floor(x);
minutes(x) = (x > 0.0 ? (x - floor(x))*60.0 : (1.0 - (x - floor(x)))*60.0)
is_int(x) = ((( abs(x - floor(x)) < epsilon ) || ( abs(x - ceil(x)) < epsilon)) ? 1 : 0)
key_y = 0.98;
key_x = 0.07;
key_spacing = 0.04;


#Mercator for the sphere
#MINUS SIGN ADDED BY HAND TO FLIP THE MAP
xe(lambda) =  (-1.0) * ( ((0.0 <= lambda) & (lambda < 180.0)) ? lambda: lambda - 360.0 )*k
ye(phi) = (log(1./cos(phi*k) + tan(phi*k)))
lambda_inv(xe) = ( ((xe <= 0.0) & (xe > -pi)) ? -xe*K: -xe*K + 360.0 )
#given xe, this returns the corresponding lambda in non-standard format, i.e., lying in the interval [-pi, pi)
lambda_inv_pm(xe) = -xe*K 
phi_inv(ye) = K*atan(sinh(ye))	

myf(x,y)=sprintf("%g\260 %g' %s , %g\260 %g' %s", myint(abs(phi_inv(y))), (abs(phi_inv(y)) - myint(abs(phi_inv(y))))*60.0, (phi_inv(y) > 0.0 ? 'N': 'S'), myint(abs(lambda_inv_pm(x))), (abs(lambda_inv_pm(x)) - myint(abs(lambda_inv_pm(x))))*60.0, ((lambda_inv_pm(x) > 0.0) ? 'W': 'E'))
set mouse mouseformat function myf(x, y)
set mouse mouseformat 8


#clear
set parametric
set multiplot

set size ratio -1
set key top left
#size of minor x and y tics with respect to screen size (1 = tic as long as screen size)
mtics_size = 0.01
set xtics rotate by 45 offset 0,graph -0.09

set format x "";     
set xtics ();

set format y "";     
set ytics ();

set ticscale 3,1
set samples S
#increments in degrees
increment_phi = 20.0;
increment_lambda = 60.0;
list(start,end,increment)=system(sprintf("seq %g %g %g", start, increment, end))


#set tics scale 0

#latitude and longitude for a circle of equal altitude whose ground position has coordinates d, GHA, and whose angular aperture is omega
phi_cea(t, d, GHA, omega) =pi/2.-acos(cos(omega) * sin(d)-cos(d) * cos(t) * sin(omega))
lambda_cea(t, d, GHA, omega) = ( lambda = -(atan((-sin(GHA) * (cos(d)* cos(omega)+cos(t) * sin(d) * sin(omega))+cos(GHA) * sin(omega) * sin(t))/(cos(d) * cos(GHA) * cos(omega)+sin(omega)*  (cos(GHA) * cos(t) * sin(d)+sin(GHA)* sin(t)))) + (cos(d)* cos(GHA)* cos(omega) +  sin(omega) * (cos(GHA)* cos(t) * sin(d) + sin(GHA)  *sin(t)) >0.0 ? 0.0 : pi)) , lambda - 2.0*pi*floor(lambda/(2.0*pi)))

#latitude and longitude for an orthodrome whose starting point has coordinates d, GHA and whose initial heading is a
phi_lox(l, d, GHA, a, Re) = ( ( (( (0.0 <= a) && (a < pi/2.0) ) || ( (3.0*pi/2.0 <= a) && (a < 2.0*pi) )) ? tau = 1 : tau =-1 ), ( ((0.0 <= a) && (a < pi)) ? sigma = -1 : sigma = 1 ), C = (cos(a))**2.0, t = -tau*sqrt((1.0-C)/C) * log( sqrt((1.0+sin(d))/(1.0-sin(d))) * tan( -tau*sqrt(C)*l/(2.0*Re) + atan(sqrt((1.0-sin(d))/(1.0+sin(d)))) ) ), asin( tanh( tau*sqrt(C/(1.0-C))*t + atanh(sin(d)) ) ) )

lambda_lox(l, d, GHA, a, Re) = ( ( (( (0.0 <= a) && (a < pi/2.0) ) || ( (3.0*pi/2.0 <= a) && (a < 2.0*pi) )) ? tau = 1 : tau =-1 ), ( ((0.0 <= a) && (a < pi)) ? sigma = -1 : sigma = 1 ), C = (cos(a))**2.0, t = -tau*sqrt((1.0-C)/C) * log( sqrt((1.0+sin(d))/(1.0-sin(d))) * tan( -tau*sqrt(C)*l/(2.0*Re) + atan(sqrt((1.0-sin(d))/(1.0+sin(d)))) ) ), lambda = GHA + sigma*t, lambda - 2.0*pi*floor(lambda/(2.0*pi)) )


#latitude and longitude for an orthodrome whose starting point has coordinates d, GHA and whose initial heading is a
phi_ort(l, d, GHA, a, Re) = asin(cos(a) * cos(d) * sin(l/Re) + cos(l/Re) * sin(d))
lambda_ort(l, d, GHA, a, Re) = (lambda = - (atan((cos(GHA) * sin(l/Re) * sin(a) + sin(GHA) * (-cos(l/Re) * cos(d) +  cos(a) * sin(l/Re) * sin(d)))/( cos(l/Re) * cos(GHA) * cos(d) +  sin(l/Re) * (sin(a) * sin(GHA) -  cos(a) * cos(GHA) * sin(d)))) + ( ( cos(l/Re) * cos(GHA) * cos(d) + sin(l/Re) * (sin(a) * sin(GHA) - cos(a) * cos(GHA) * sin(d)) ) >= 0.0 ? 0.0 : pi ) ), lambda - 2.0*pi*floor(lambda/(2.0*pi)))

#angles are in degrees
#lambda_min is the angle which corresponds to the leftmost x coordinate x_min in the Mercator plot, and simiarly for lambda_max
lambda_min = 170.1999999999999886313162278384;
lambda_max = 190;
phi_min = 310.76666666666665150842163711786;
phi_max = 80.883333333333339965065533760935;

set xrange [xe(lambda_min):xe(lambda_max)]
set yrange [ye(phi_min):ye(phi_max)]

dx = ye((phi_min+phi_max)/2.0+1./60.) -  ye((phi_min+phi_max)/2.0)

set style arrow 1 nohead ls 1 lw 1 linecolor rgb 'black'
set style arrow 2 nohead ls 1 lw 1 linecolor rgb 'gray'


label_rose(n) = sprintf("\\scalebox{0.3}{$\\color{mygray}{%d}$}",n)
label_deg_latitude(x) = ( x == 0.0 ) ? sprintf("0\260") : ( x > 0.0 ? sprintf("%.f\260 N", x - myint(x/360.0)*360.0) : sprintf("%.f\260 S", ((-x) - myint((-x)/360.0)*360.0)) )
label_deg_longitude(x) = ( x == 0.0 ) ? sprintf("0\260") : ( x < 180.0 ? sprintf("%.f\260 W", x - myint(x/360.0)*360.0) : sprintf("%.f\260 E", 360.0 - (x - myint(x/360.0)*360.0)) )
#this prints the arcminutes only of angle x
label_min(x) = sprintf("%.f'", minutes(x) ) 
#if the arcminutes are zero, I print out only the degrees for clarity
label_deg_min(x) =  ( minutes(x) == 0.0 ? sprintf("%.f\260", degrees(x)) : sprintf("%.f\260 %.f'", degrees(x), minutes(x)) )
#this function outputs angle x in the format which can be read from file from lib.h 
label_deg_min_c_lib(x) = sprintf("%.fÂ° %.f'", degrees(x), minutes(x))


#GPS position
#lambda0 = 360.0 -(2.0 + 24./60. + 26.07/(60.**2.))
#phi0 = 48.0 + 51./60. + 19.63/(60.**2.)
#set object circle at  xe(lambda0),ye(phi0) radius char 1  fillcolor rgb 'red' fillstyle solid noborder

#coastlines
#	plot   '/Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt' u (xe($2)):(ye($1)) w d linecolor rgb "gray" noti
p 0,0 w l noti

#unset parametric
unset multiplot

x_max_old = 0.0;

while(1){

	if(GPVAL_X_MAX!=x_max_old){


	unset arrow;
	set bmargin 6;
	

	#print "Recalculating tics ... ";

	lambda_min = lambda_inv(GPVAL_X_MIN);
	lambda_max = lambda_inv(GPVAL_X_MAX);
	
	phi_min = phi_inv(GPVAL_Y_MIN);
	phi_max = phi_inv(GPVAL_Y_MAX);

	set xrange [xe(lambda_min):xe(lambda_max)]
	set yrange [ye(phi_min):ye(phi_max)]

	phi_span = phi_max - phi_min;
	lambda_span = -(-(GPVAL_X_MAX - GPVAL_X_MIN)*K);
	
	#print "lambda in [" , lambda_min , " , " , lambda_max , "]";
	#print "phi in [" , phi_min , " , " , phi_max , "]";

	#print "x in [" , GPVAL_X_MIN , " , " , GPVAL_X_MAX , "]";
	#print "y in [" , GPVAL_Y_MIN , " , " , GPVAL_Y_MAX , "]";


	#print "Determining dlambda ...";

	#gamma_lambda is the compression factor which allows from switching from increments in degrees to increments in arcminutes
	if(lambda_span > 1.0){gamma_lambda = 1.0;}
	else{gamma_lambda = 60.0;}

	dlambda=1.0/gamma_lambda;
	while(N*dlambda<lambda_span){
	#print dlambda;
	if(dlambda == 1.0/gamma_lambda){dlambda = dlambda + 4.0/gamma_lambda;}
	else{dlambda = dlambda + 5.0/gamma_lambda;}
	}
	if(dlambda > 1.0/gamma_lambda){
		   if(dlambda == 5.0/gamma_lambda){dlambda = dlambda - 4.0/gamma_lambda;}
		   else{dlambda = dlambda - 5.0/gamma_lambda;}
	}
	#print "... dlambda = " , dlambda;


	#print "Determining dphi ...";
	#print "phi_span = ", phi_span;

	#gamma_phi is the compression factor which allows from switching from increments in degrees to increments in arcminutes
	if(phi_span > 1.0){gamma_phi = 1.0;}
	else{gamma_phi = 60.0;}
	
	dphi=1.0/gamma_phi;
	while(N*dphi<phi_span){
		#print dphi;
		if(dphi == 1.0/gamma_phi){dphi = dphi + 4.0/gamma_phi;}
		else{dphi = dphi + 5.0/gamma_phi;}
	}
	if(dphi > 1.0/gamma_phi){
		   if(dphi == 5.0/gamma_phi){dphi = dphi - 4.0/gamma_phi;}
		   else{dphi = dphi - 5.0/gamma_phi;}
	}
	#print "... dphi = " , dphi;



	#print "Setting xtics at dlambda intervals:";

	set format x "";     
	set xtics ();

	lambda= (int(lambda_min/dlambda))*dlambda;
	x = xe(lambda);

	#plot the first few custom-made myxics close to the left edge of the x axis. Here I consider 		x = x + dlambda*k (the first value of x which is an 'integer multiple of dlambda' and which is contained in the x axis), and then decrease it by one tenth of arcminute in the while loop
	if(gamma_lambda == 60.0){
					i=0.0;
					while(x + (dlambda + (i/10.0)*1.0/60.0)*k > GPVAL_X_MIN){
				             #set custom-made minor xtics every tenths (i/10.0) of arcminutes (1.0/60.0) 
					     set arrow from first x + (dlambda + (i/10.0)*1.0/60.0)*k, graph 0 to first x + (dlambda + (i/10.0)*1.0/60.0)*k, graph mtics_size nohead  linecolor "blue";
					     i=i-1.0;
					}
			 	   
	}


	while(x <= GPVAL_X_MAX){
 
		lambda = lambda_inv(x);

		if(x >= GPVAL_X_MIN){

		          if(is_int(lambda) == 1){
		       		      set xtics add (label_deg_longitude(lambda) x);
		          }else{
		       		      set xtics add (label_min(lambda) x);
		          }

			  if(gamma_lambda == 60.0){
			  	   i=0.0;
				   #plot the custom-made xtics from x to the next x (x + dlambda*k)
				   while(x + (i/10.0)*1.0/60.0*k <  x + dlambda*k){
					if(x + (i/10.0)*1.0/60.0*k <= GPVAL_X_MAX){
					     #set custom-made minor xtics every tenths (i/10.0) of arcminutes (1.0/60.0) 
					     set arrow from first x + (i/10.0)*1.0/60.0*k, graph 0 to first x + (i/10.0)*1.0/60.0*k, graph mtics_size nohead  linecolor "blue";
					}
					i=i+1.0;
			 	   }
		          }


			  set arrow from first x, graph 0 to first x, graph 1 nohead  linecolor "gray";


		}

		
		#print lambda_inv(x);
		x = x + dlambda*k;
		#lambda = lambda + dlambda;

	}




 
	#if(dlambda == 1.0){
	#	print "Setting mxtics";
	#	set mxtics 60;
	#	show mxtics;
	#}


	#print "Setting ytics at dphi intervals:";
	
	set format y "";     
	set ytics ();
	phi = (int(phi_min/dphi))*dphi;

	#plot the first few custom-made mytics close to the lower edge of the y axis. Here I consider phi + dphi (the first value of phi which is an 'integer multiple of dphi' and which is contained in the y axis), and then decrease it by one tenth of arcminute in the while loop
	if(gamma_phi == 60.0){
					i=0.0;
					while(ye(phi + dphi + (i/10.0)*1.0/60.0) >= GPVAL_Y_MIN){
						  #set custom-made minor ytics every tenths (i/10.0) of arcminutes (1.0/60.0) 
		       	 		       	  set arrow from graph 0,first ye(phi + dphi + (i/10.0)*1.0/60.0) to graph mtics_size, first ye(phi + dphi + (i/10.0)*1.0/60.0) nohead  linecolor "blue";
					i=i-1.0;
					}
			 	   
	}

	while(phi<=phi_max){
		if(phi >= phi_min){
		       if(is_int(phi) == 1){
		       		      set ytics add (label_deg_latitude(phi) ye(phi));
		       }else{
		       		      set ytics add (label_min(phi) ye(phi));
		       }

		       if(gamma_phi == 60.0){
			  	   i=0.0;
				   #plot the custom-made ytics from phi to the next phi (phi + dphi)
			 	   while(phi + (i/10.0)*1.0/60.0 < phi + dphi){
					if(phi + (i/10.0)*1.0/60.0 <= phi_max){
						#set custom-made minor ytics every tenths (i/10.0) of arcminutes (1.0/60.0) 
		       	 		       set arrow from graph 0,first ye(phi + (i/10.0)*1.0/60.0) to graph mtics_size, first ye(phi + (i/10.0)*1.0/60.0) nohead  linecolor "blue";
					}
					i=i+1.0;
			 	   }
		       }

		       set arrow from graph 0,first ye(phi) to graph 1, first ye(phi) nohead  linecolor "gray";
		}
		#print phi;
		phi = phi + dphi;


	}


	clear;

	set multiplot	
	#coastlines
	#set the values lambda_min_get_coastline_data,  lambda_max_get_coastline_data which I will feed into get_coastline_data.cpp
	if((lambda_min < 180.0) && (lambda_max >= 180.0)){
		lambda_min_get_coastline_data = lambda_max - 360.0;
		lambda_max_get_coastline_data = lambda_min;
	}else{
		lambda_min_get_coastline_data = lambda_max;
		lambda_max_get_coastline_data = lambda_min;
	}

	#fetch coastline data in path_file_coastline_data_blocked, and produce file path_file_selected_coastline_data which contains n_points_coastline points of the coastline of the world
	system(sprintf("./get_coastline_data.o -p %g -P %g -l %g -L %g -N %g > /dev/null 2>&1", floor(phi_min), floor(phi_max), floor(lambda_min_get_coastline_data), floor(lambda_max_get_coastline_data), n_points_coastline));

	plot   '/Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt' u (xe($2)):(ye($1)) w d linecolor rgb "black" noti

	
 set key at graph key_x, graph key_y - 14*key_spacing
plot "+" u (xe(K*(6.2411274295520877686271887796465))):(ye(K*(0.8526832726340385359975471146754))) w p lw 2 lt 1 ti "MP"

 set key at graph key_x, graph key_y - 15*key_spacing
plot "+" u (xe(K*(6.2414323710898926833579025696963))):(ye(K*(0.85276364997267728451646462417557))) w p lw 2 lt 2 ti "crossing"

 set key at graph key_x, graph key_y - 16*key_spacing
plot "+" u (xe(K*(4.7299995636788985109433269826695))):(ye(K*(5.4913278251412336317116569261998))) w p lw 2 lt 3 ti "crossing"

 set key at graph key_x, graph key_y - 17*key_spacing
plot "+" u (xe(K*(6.2419162278099982188450667308643))):(ye(K*(0.852718706947095728132524072862))) w p lw 2 lt 4 ti "crossing"

 set key at graph key_x, graph key_y - 18*key_spacing
plot "+" u (xe(K*(4.7323447626295349621727837075014))):(ye(K*(5.5062691266956083069317173794843))) w p lw 2 lt 5 ti "crossing"

 set key at graph key_x, graph key_y - 19*key_spacing
plot "+" u (xe(K*(6.2417740010346367540705614374019))):(ye(K*(0.85273193445177264404577499590232))) w p lw 2 lt 6 ti "crossing"

 set key at graph key_x, graph key_y - 20*key_spacing
plot "+" u (xe(K*(4.7354354491242096614200818294194))):(ye(K*(5.5254456655038790557910033385269))) w p lw 2 lt 7 ti "crossing"

 set key at graph key_x, graph key_y - 21*key_spacing
plot "+" u (xe(K*(6.2417322974800892865232526673935))):(ye(K*(0.85273581035595535926319143982255))) w p lw 2 lt 8 ti "crossing"

 set key at graph key_x, graph key_y - 22*key_spacing
plot "+" u (xe(K*(4.737167543050274431948309938889))):(ye(K*(5.535958661127263980006318888627))) w p lw 2 lt 9 ti "crossing"

 set key at graph key_x, graph key_y - 23*key_spacing
plot "+" u (xe(K*(6.2418092466788053229720389936119))):(ye(K*(0.85272865780580475725258793318062))) w p lw 2 lt 10 ti "crossing"

 set key at graph key_x, graph key_y - 24*key_spacing
plot "+" u (xe(K*(4.7292615278423815183828082808759))):(ye(K*(5.4865502521205886665711659588851))) w p lw 2 lt 11 ti "crossing"

 set key at graph key_x, graph key_y - 25*key_spacing
plot "+" u (xe(K*(6.2415159818392833557254562037997))):(ye(K*(0.85275589534034668126594169734744))) w p lw 2 lt 12 ti "crossing"

 set key at graph key_x, graph key_y - 26*key_spacing
plot "+" u (xe(K*(4.7310339104833447620990227733273))):(ye(K*(5.4979615830084460625926112697925))) w p lw 2 lt 13 ti "crossing"

 set key at graph key_x, graph key_y - 27*key_spacing
plot "+" u (xe(K*(6.2412803854898690758545853896067))):(ye(K*(0.85277773379789378882520622937591))) w p lw 2 lt 14 ti "crossing"

 set key at graph key_x, graph key_y - 28*key_spacing
plot "+" u (xe(K*(4.7344811440164935589791639358737))):(ye(K*(5.5195835023253945195165215409361))) w p lw 2 lt 15 ti "crossing"

 set key at graph key_x, graph key_y - 29*key_spacing
plot "+" u (xe(K*(6.2410591296743724853968160459772))):(ye(K*(0.85279820808524653408255744579947))) w p lw 2 lt 16 ti "crossing"

 set key at graph key_x, graph key_y - 30*key_spacing
plot "+" u (xe(K*(4.7354621077040963683657537330873))):(ye(K*(5.5256086974776339459936025377829))) w p lw 2 lt 17 ti "crossing"

 set key at graph key_x, graph key_y - 31*key_spacing
plot "+" u (xe(K*(6.2412051075894989793368949904107))):(ye(K*(0.85278470355990698692494333954528))) w p lw 2 lt 18 ti "crossing"

 set key at graph key_x, graph key_y - 32*key_spacing
plot "+" u (xe(K*(4.7366292998534333946736296638846))):(ye(K*(5.5327088901416923150122784136329))) w p lw 2 lt 19 ti "crossing"

 set key at graph key_x, graph key_y - 33*key_spacing
plot "+" u (xe(K*(6.241386195633046085617934295442))):(ye(K*(0.85276793053175747871819112333469))) w p lw 2 lt 20 ti "crossing"

 set key at graph key_x, graph key_y - 34*key_spacing
plot "+" u (xe(K*(4.7442559701119941806268798245583))):(ye(K*(5.5774441118920830007255062810145))) w p lw 2 lt 21 ti "crossing"

 set key at graph key_x, graph key_y - 35*key_spacing
plot "+" u (xe(K*(6.2395388324977094640644281753339))):(ye(K*(0.85293797804016857622144698325428))) w p lw 2 lt 22 ti "crossing"

 set key at graph key_x, graph key_y - 36*key_spacing
plot "+" u (xe(K*(1.055055344786281823488138797984))):(ye(K*(6.1019175264003191472284015617333))) w p lw 2 lt 23 ti "crossing"

 set key at graph key_x, graph key_y - 37*key_spacing
plot "+" u (xe(K*(6.2377877542980026959185124724172))):(ye(K*(0.85309699031647034939140894493903))) w p lw 2 lt 24 ti "crossing"

 set key at graph key_x, graph key_y - 38*key_spacing
plot "+" u (xe(K*(0.7302997584231644134789007694053))):(ye(K*(0.47130205997436780407383594138082))) w p lw 2 lt 25 ti "crossing"

 set key at graph key_x, graph key_y - 39*key_spacing
plot "+" u (xe(K*(6.2503139980285018495465010346379))):(ye(K*(0.86901291560196480823208275978686))) w p lw 2 lt 26 ti "crossing"

 set key at graph key_x, graph key_y - 40*key_spacing
plot "+" u (xe(K*(5.4721897583879650639460123784374))):(ye(K*(5.7819196888673500822619644168299))) w p lw 2 lt 27 ti "crossing"

 set key at graph key_x, graph key_y - 41*key_spacing
plot "+" u (xe(K*(6.244275934832448804456817015307))):(ye(K*(0.85800557890595952059697992808651))) w p lw 2 lt 28 ti "crossing"

 set key at graph key_x, graph key_y - 42*key_spacing
plot "+" u (xe(K*(5.4924298389741483816806066897698))):(ye(K*(5.7998576158117201018171726900619))) w p lw 2 lt 29 ti "crossing"

 set key at graph key_x, graph key_y - 43*key_spacing
plot "+" u (xe(K*(6.2433665420055275419031204364728))):(ye(K*(0.8563332016694933379596932354616))) w p lw 2 lt 30 ti "crossing"

 set key at graph key_x, graph key_y - 44*key_spacing
plot "+" u (xe(K*(5.499542924358229001313702610787))):(ye(K*(5.806356931011957378530041751219))) w p lw 2 lt 31 ti "crossing"

 set key at graph key_x, graph key_y - 45*key_spacing
plot "+" u (xe(K*(6.2419674739649826378240504709538))):(ye(K*(0.85375290600352315983911921648541))) w p lw 2 lt 32 ti "crossing"

 set key at graph key_x, graph key_y - 46*key_spacing
plot "+" u (xe(K*(4.7012851952378147402100694307592))):(ye(K*(5.4897194230962460537170954921748))) w p lw 2 lt 33 ti "crossing"

 set key at graph key_x, graph key_y - 47*key_spacing
plot "+" u (xe(K*(6.2415458516135240429889563529287))):(ye(K*(0.85297355314873313236745389076532))) w p lw 2 lt 34 ti "crossing"

 set key at graph key_x, graph key_y - 48*key_spacing
plot "+" u (xe(K*(4.7676194911035549850453207909595))):(ye(K*(5.4942750150676689102624550287146))) w p lw 2 lt 35 ti "crossing"

 set key at graph key_x, graph key_y - 49*key_spacing
plot "+" u (xe(K*(6.2412418204892219364410266280174))):(ye(K*(0.8524110591557287897046535363188))) w p lw 2 lt 36 ti "crossing"

 set key at graph key_x, graph key_y - 50*key_spacing
plot "+" u (xe(K*(4.8740635349402872122936969390139))):(ye(K*(5.5079266923800993538407055893913))) w p lw 2 lt 37 ti "crossing"

 set key at graph key_x, graph key_y - 51*key_spacing
plot "+" u (xe(K*(6.2409739533416921375419406103902))):(ye(K*(0.85191512310734029966852176585235))) w p lw 2 lt 38 ti "crossing"

 set key at graph key_x, graph key_y - 52*key_spacing
plot "+" u (xe(K*(4.8999725439036065921527551836334))):(ye(K*(5.5124838369160471529539790935814))) w p lw 2 lt 39 ti "crossing"

 set key at graph key_x, graph key_y - 53*key_spacing
plot "+" u (xe(K*(6.2411598736420605959551721753087))):(ye(K*(0.8522593754527827414335661160294))) w p lw 2 lt 40 ti "crossing"

 set key at graph key_x, graph key_y - 54*key_spacing
plot "+" u (xe(K*(4.928442730128837823144749563653))):(ye(K*(5.5180743195444499349378020269796))) w p lw 2 lt 41 ti "crossing"

 set key at graph key_x, graph key_y - 55*key_spacing
plot "+" u (xe(K*(6.241384043961193839322731946595))):(ye(K*(0.85267424216706744211080604145536))) w p lw 2 lt 42 ti "crossing"

 set key at graph key_x, graph key_y - 56*key_spacing
plot "+" u (xe(K*(5.07162803205843548681741594919))):(ye(K*(5.5561385366774125316169374855235))) w p lw 2 lt 43 ti "crossing"

 set key at graph key_x, graph key_y - 57*key_spacing
plot "+" u (xe(K*(6.2414035082599150783266850339714))):(ye(K*(0.85271025345695095065678970058798))) w p lw 2 lt 44 ti "crossing"

 set key at graph key_x, graph key_y - 58*key_spacing
plot "+" u (xe(K*(4.5791638846158884135206790233497))):(ye(K*(5.4889890554657965182627776812296))) w p lw 2 lt 45 ti "crossing"

 set key at graph key_x, graph key_y - 59*key_spacing
plot "+" u (xe(K*(6.2414108919973978473194620164577))):(ye(K*(0.85272391380519818593342051826767))) w p lw 2 lt 46 ti "crossing"

 set key at graph key_x, graph key_y - 60*key_spacing
plot "+" u (xe(K*(4.6115223438933226063340953260195))):(ye(K*(5.4882225157854582775485141610261))) w p lw 2 lt 47 ti "crossing"

 set key at graph key_x, graph key_y - 61*key_spacing
plot "+" u (xe(K*(6.2398651914429663634109601844102))):(ye(K*(0.84868888293537358968876560538774))) w p lw 2 lt 48 ti "crossing"

 set key at graph key_x, graph key_y - 62*key_spacing
plot "+" u (xe(K*(5.5093691027073772303879195533227))):(ye(K*(5.8142957744038019640697712020483))) w p lw 2 lt 49 ti "crossing"

 set key at graph key_x, graph key_y - 63*key_spacing
plot "+" u (xe(K*(6.2401849143583874024443503003567))):(ye(K*(0.84931834892036661699421529192477))) w p lw 2 lt 50 ti "crossing"

 set key at graph key_x, graph key_y - 64*key_spacing
plot "+" u (xe(K*(5.5145170585665503892869310220703))):(ye(K*(5.8189955885610098462734640634153))) w p lw 2 lt 51 ti "crossing"

 set key at graph key_x, graph key_y - 65*key_spacing
plot "+" u (xe(K*(6.2417604783892519648702545964625))):(ye(K*(0.85241337960029861520183658285532))) w p lw 2 lt 52 ti "crossing"

 set key at graph key_x, graph key_y - 66*key_spacing
plot "+" u (xe(K*(4.604163054572142144138524599839))):(ye(K*(5.5053695890845464333551717572846))) w p lw 2 lt 53 ti "crossing"

 set key at graph key_x, graph key_y - 67*key_spacing
plot "+" u (xe(K*(6.2413612266951217222299419518095))):(ye(K*(0.85163018120725098025758370567928))) w p lw 2 lt 54 ti "crossing"

 set key at graph key_x, graph key_y - 68*key_spacing
plot "+" u (xe(K*(4.6813996215959488012003930634819))):(ye(K*(5.5045817188317105461692335666157))) w p lw 2 lt 55 ti "crossing"

 set key at graph key_x, graph key_y - 69*key_spacing
plot "+" u (xe(K*(6.2411066372876069507924512436148))):(ye(K*(0.85113037521642476157524015434319))) w p lw 2 lt 56 ti "crossing"

 set key at graph key_x, graph key_y - 70*key_spacing
plot "+" u (xe(K*(4.8055842924273761695985740516335))):(ye(K*(5.5118057521045011881710706802551))) w p lw 2 lt 57 ti "crossing"

 set key at graph key_x, graph key_y - 71*key_spacing
plot "+" u (xe(K*(6.2408487024341026128126941330265))):(ye(K*(0.85062369473567389643875458205002))) w p lw 2 lt 58 ti "crossing"

 set key at graph key_x, graph key_y - 72*key_spacing
plot "+" u (xe(K*(4.8357101071138854919695404532831))):(ye(K*(5.5151696864312214074743678793311))) w p lw 2 lt 59 ti "crossing"

 set key at graph key_x, graph key_y - 73*key_spacing
plot "+" u (xe(K*(6.241053024201105969837044540327))):(ye(K*(0.85102508448195357537713334750151))) w p lw 2 lt 60 ti "crossing"

 set key at graph key_x, graph key_y - 74*key_spacing
plot "+" u (xe(K*(4.8688542744113396665284199116286))):(ye(K*(5.5196210923557051941656936833169))) w p lw 2 lt 61 ti "crossing"

 set key at graph key_x, graph key_y - 75*key_spacing
plot "+" u (xe(K*(6.2413595516456723544251872226596))):(ye(K*(0.85162689375966582616683808737434))) w p lw 2 lt 62 ti "crossing"

 set key at graph key_x, graph key_y - 76*key_spacing
plot "+" u (xe(K*(5.0338519903257266108198564324994))):(ye(K*(5.5542384694965347691208989999723))) w p lw 2 lt 63 ti "crossing"

 set key at graph key_x, graph key_y - 77*key_spacing
plot "+" u (xe(K*(6.2418819114288979221782938111573))):(ye(K*(0.85265144364833655998836547951214))) w p lw 2 lt 64 ti "crossing"

 set key at graph key_x, graph key_y - 78*key_spacing
plot "+" u (xe(K*(4.584295869526288313977602228988))):(ye(K*(5.5062251438080771492877829587087))) w p lw 2 lt 65 ti "crossing"

 set key at graph key_x, graph key_y - 79*key_spacing
plot "+" u (xe(K*(6.2418932050810669309726108622272))):(ye(K*(0.85267358086194644517519236615044))) w p lw 2 lt 66 ti "crossing"

 set key at graph key_x, graph key_y - 80*key_spacing
plot "+" u (xe(K*(4.6164389794107352216201434202958))):(ye(K*(5.5049748703497369817227991006803))) w p lw 2 lt 67 ti "crossing"

 set key at graph key_x, graph key_y - 81*key_spacing
plot "+" u (xe(K*(6.2407221732117701407105414546095))):(ye(K*(0.85050614358622889099592612183187))) w p lw 2 lt 68 ti "crossing"

 set key at graph key_x, graph key_y - 82*key_spacing
plot "+" u (xe(K*(5.5242501136029336095134567585774))):(ye(K*(5.8274440825118505316027039953042))) w p lw 2 lt 69 ti "crossing"

 set key at graph key_x, graph key_y - 83*key_spacing
plot "+" u (xe(K*(6.2418271085053858016067351854872))):(ye(K*(0.85284417977144810762979432183784))) w p lw 2 lt 70 ti "crossing"

 set key at graph key_x, graph key_y - 84*key_spacing
plot "+" u (xe(K*(4.4588874699182525773721863515675))):(ye(K*(5.5435914082381501089002995286137))) w p lw 2 lt 71 ti "crossing"

 set key at graph key_x, graph key_y - 85*key_spacing
plot "+" u (xe(K*(6.2414056612662367484745118417777))):(ye(K*(0.85195306873742604469867956140661))) w p lw 2 lt 72 ti "crossing"

 set key at graph key_x, graph key_y - 86*key_spacing
plot "+" u (xe(K*(4.5506370099524930949996814888436))):(ye(K*(5.5315274650545092072206898592412))) w p lw 2 lt 73 ti "crossing"

 set key at graph key_x, graph key_y - 87*key_spacing
plot "+" u (xe(K*(6.2411325295353901054795642266981))):(ye(K*(0.85137511635338103399561759943026))) w p lw 2 lt 74 ti "crossing"

 set key at graph key_x, graph key_y - 88*key_spacing
plot "+" u (xe(K*(4.7000576917819270050813429406844))):(ye(K*(5.5247695239940508571407917770557))) w p lw 2 lt 75 ti "crossing"

 set key at graph key_x, graph key_y - 89*key_spacing
plot "+" u (xe(K*(6.2408671329880860412231413647532))):(ye(K*(0.85081320030901075313067849492654))) w p lw 2 lt 76 ti "crossing"

 set key at graph key_x, graph key_y - 90*key_spacing
plot "+" u (xe(K*(4.7363910283291286162921096547507))):(ye(K*(5.5254759898871492751482037419919))) w p lw 2 lt 77 ti "crossing"

 set key at graph key_x, graph key_y - 91*key_spacing
plot "+" u (xe(K*(6.2410723584671012886815333331469))):(ye(K*(0.85124774660139845838813243972254))) w p lw 2 lt 78 ti "crossing"

 set key at graph key_x, graph key_y - 92*key_spacing
plot "+" u (xe(K*(4.7765237006291183519124388112687))):(ye(K*(5.5273249488486833058686897857115))) w p lw 2 lt 79 ti "crossing"

 set key at graph key_x, graph key_y - 93*key_spacing
plot "+" u (xe(K*(6.2413652513558446344177355058491))):(ye(K*(0.85186758236166704172376284986967))) w p lw 2 lt 80 ti "crossing"

 set key at graph key_x, graph key_y - 94*key_spacing
plot "+" u (xe(K*(4.9747656217729394612092619354371))):(ye(K*(5.5535210953712716985819497494958))) w p lw 2 lt 81 ti "crossing"

 set key at graph key_x, graph key_y - 95*key_spacing
plot "+" u (xe(K*(6.2417439522469333468279728549533))):(ye(K*(0.85266841900784584584727099354495))) w p lw 2 lt 82 ti "crossing"

 set key at graph key_x, graph key_y - 96*key_spacing
plot "+" u (xe(K*(4.5907949931396938580974165233783))):(ye(K*(5.5281709848979536658930555859115))) w p lw 2 lt 83 ti "crossing"

 set key at graph key_x, graph key_y - 97*key_spacing
plot "+" u (xe(K*(6.2417533085543341897505342785735))):(ye(K*(0.85268819629669501125590613810346))) w p lw 2 lt 84 ti "crossing"

 set key at graph key_x, graph key_y - 98*key_spacing
plot "+" u (xe(K*(4.6226746469810588990867472602986))):(ye(K*(5.5263182654832245788156797061674))) w p lw 2 lt 85 ti "crossing"

 set key at graph key_x, graph key_y - 99*key_spacing
plot "+" u (xe(K*(6.2418507137654470895427039067727))):(ye(K*(0.85299688751835844868764979764819))) w p lw 2 lt 86 ti "crossing"

 set key at graph key_x, graph key_y - 100*key_spacing
plot "+" u (xe(K*(4.3701916536520606371141184354201))):(ye(K*(5.5770968132748830470291068195365))) w p lw 2 lt 87 ti "crossing"

 set key at graph key_x, graph key_y - 101*key_spacing
plot "+" u (xe(K*(6.2414179560841223093348162365146))):(ye(K*(0.85204245786127219552952283265768))) w p lw 2 lt 88 ti "crossing"

 set key at graph key_x, graph key_y - 102*key_spacing
plot "+" u (xe(K*(4.4695114106876641102417124784552))):(ye(K*(5.5559131733899507210594492789824))) w p lw 2 lt 89 ti "crossing"

 set key at graph key_x, graph key_y - 103*key_spacing
plot "+" u (xe(K*(6.2411376844468877678195894986857))):(ye(K*(0.85142387326232848998586177913239))) w p lw 2 lt 90 ti "crossing"

 set key at graph key_x, graph key_y - 104*key_spacing
plot "+" u (xe(K*(4.633376446436419549002039275365))):(ye(K*(5.5375824891784350967327554826625))) w p lw 2 lt 91 ti "crossing"

 set key at graph key_x, graph key_y - 105*key_spacing
plot "+" u (xe(K*(6.2408687671693199305877897131722))):(ye(K*(0.85083001191092944015537113955361))) w p lw 2 lt 92 ti "crossing"

 set key at graph key_x, graph key_y - 106*key_spacing
plot "+" u (xe(K*(4.6734400131057585170424317766447))):(ye(K*(5.5360560714381392699579009786248))) w p lw 2 lt 93 ti "crossing"

 set key at graph key_x, graph key_y - 107*key_spacing
plot "+" u (xe(K*(6.2410757815691679795122581708711))):(ye(K*(0.85128719973578959034909985348349))) w p lw 2 lt 94 ti "crossing"

 set key at graph key_x, graph key_y - 108*key_spacing
plot "+" u (xe(K*(4.7178559518301463882039570307825))):(ye(K*(5.5356864871764841495860309805721))) w p lw 2 lt 95 ti "crossing"

 set key at graph key_x, graph key_y - 109*key_spacing
plot "+" u (xe(K*(6.2413667078133698851161170750856))):(ye(K*(0.85192937513789646075679229397792))) w p lw 2 lt 96 ti "crossing"

 set key at graph key_x, graph key_y - 110*key_spacing
plot "+" u (xe(K*(4.9371020497942517124556616181508))):(ye(K*(5.5544948684880663947183165873867))) w p lw 2 lt 97 ti "crossing"

 set key at graph key_x, graph key_y - 111*key_spacing
plot "+" u (xe(K*(6.241703965761814743018476292491))):(ye(K*(0.85267333675216450128431233679294))) w p lw 2 lt 98 ti "crossing"

 set key at graph key_x, graph key_y - 112*key_spacing
plot "+" u (xe(K*(4.5943339970050436349424671789166))):(ye(K*(5.5401674917094831940289623162244))) w p lw 2 lt 99 ti "crossing"

 set key at graph key_x, graph key_y - 113*key_spacing
plot "+" u (xe(K*(6.2417126305114987161459794151597))):(ye(K*(0.85269244357747830953542234055931))) w p lw 2 lt 100 ti "crossing"

 set key at graph key_x, graph key_y - 114*key_spacing
plot "+" u (xe(K*(4.626071873998775174641195917502))):(ye(K*(5.5379833799032471830514623434283))) w p lw 2 lt 101 ti "crossing"

 set key at graph key_x, graph key_y - 115*key_spacing
plot "+" u (xe(K*(6.2390406352872176398705050814897))):(ye(K*(0.83512279398444200229079115160857))) w p lw 2 lt 102 ti "crossing"

 set key at graph key_x, graph key_y - 116*key_spacing
plot "+" u (xe(K*(5.696570494271249174289550865069))):(ye(K*(5.7915975842571603138253522047307))) w p lw 2 lt 103 ti "crossing"

 set key at graph key_x, graph key_y - 117*key_spacing
plot "+" u (xe(K*(6.2400938433970321028709804522805))):(ye(K*(0.84175194756131910267527018731926))) w p lw 2 lt 104 ti "crossing"

 set key at graph key_x, graph key_y - 118*key_spacing
plot "+" u (xe(K*(5.6985285104344614026672388717998))):(ye(K*(5.7935295526341139549231229466386))) w p lw 2 lt 105 ti "crossing"

 set key at graph key_x, graph key_y - 119*key_spacing
plot "+" u (xe(K*(6.239734443686264064865554246353))):(ye(K*(0.83948068716995993820972898902255))) w p lw 2 lt 106 ti "crossing"

 set key at graph key_x, graph key_y - 120*key_spacing
plot "+" u (xe(K*(5.7021166255138524547874112613499))):(ye(K*(5.7970956669365598656895599560812))) w p lw 2 lt 107 ti "crossing"

 set key at graph key_x, graph key_y - 121*key_spacing
plot "+" u (xe(K*(6.2404049697241443794837323366664))):(ye(K*(0.84372592980807470386395152672776))) w p lw 2 lt 108 ti "crossing"

 set key at graph key_x, graph key_y - 122*key_spacing
plot "+" u (xe(K*(5.7011773927051674348831511451863))):(ye(K*(5.7961589616338402564110765524674))) w p lw 2 lt 109 ti "crossing"

 set key at graph key_x, graph key_y - 123*key_spacing
plot "+" u (xe(K*(6.2413071374487545384113218460698))):(ye(K*(0.84949180037633575945932307149633))) w p lw 2 lt 110 ti "crossing"

 set key at graph key_x, graph key_y - 124*key_spacing
plot "+" u (xe(K*(5.7103878030249184405420237453654))):(ye(K*(5.805444684928364296183644910343))) w p lw 2 lt 111 ti "crossing"

 set key at graph key_x, graph key_y - 125*key_spacing
plot "+" u (xe(K*(6.241798885923714124146499671042))):(ye(K*(0.85266166119081709950933145591989))) w p lw 2 lt 112 ti "crossing"

 set key at graph key_x, graph key_y - 126*key_spacing
plot "+" u (xe(K*(4.5852096004423747999112492834684))):(ye(K*(5.5093031357047035356799824512564))) w p lw 2 lt 113 ti "crossing"

 set key at graph key_x, graph key_y - 127*key_spacing
plot "+" u (xe(K*(6.2418021999435477908946268144064))):(ye(K*(0.85268308996233066476833073465968))) w p lw 2 lt 114 ti "crossing"

 set key at graph key_x, graph key_y - 128*key_spacing
plot "+" u (xe(K*(4.6158853167240527781700620835181))):(ye(K*(5.5030847334424040084854823362548))) w p lw 2 lt 115 ti "crossing"

 set key at graph key_x, graph key_y - 129*key_spacing
plot "+" u (xe(K*(6.240478540166650489595667750109))):(ye(K*(0.84527087342310180950732956262073))) w p lw 2 lt 116 ti "crossing"

 set key at graph key_x, graph key_y - 130*key_spacing
plot "+" u (xe(K*(5.6995901078002120243581885006279))):(ye(K*(5.7945165744990960732252460729796))) w p lw 2 lt 117 ti "crossing"

 set key at graph key_x, graph key_y - 131*key_spacing
plot "+" u (xe(K*(6.2399211434948549381829252524767))):(ye(K*(0.84130698414567917087225623617996))) w p lw 2 lt 118 ti "crossing"

 set key at graph key_x, graph key_y - 132*key_spacing
plot "+" u (xe(K*(5.7044910458209585613076342269778))):(ye(K*(5.7993034997609509417770823347382))) w p lw 2 lt 119 ti "crossing"

 set key at graph key_x, graph key_y - 133*key_spacing
plot "+" u (xe(K*(6.2406620502578258324888338393066))):(ye(K*(0.84658453206127426415861236819183))) w p lw 2 lt 120 ti "crossing"

 set key at graph key_x, graph key_y - 134*key_spacing
plot "+" u (xe(K*(5.7027514362688185300953591649886))):(ye(K*(5.7975973328683521046400528575759))) w p lw 2 lt 121 ti "crossing"

 set key at graph key_x, graph key_y - 135*key_spacing
plot "+" u (xe(K*(6.2413592965075279650477568793576))):(ye(K*(0.85161616146182894659943940496305))) w p lw 2 lt 122 ti "crossing"

 set key at graph key_x, graph key_y - 136*key_spacing
plot "+" u (xe(K*(5.7125378369341666129344048385974))):(ye(K*(5.8072974907613090778113473788835))) w p lw 2 lt 123 ti "crossing"

 set key at graph key_x, graph key_y - 137*key_spacing
plot "+" u (xe(K*(6.2415079552170951160405820701271))):(ye(K*(0.8526974272626820505749378753535))) w p lw 2 lt 124 ti "crossing"

 set key at graph key_x, graph key_y - 138*key_spacing
plot "+" u (xe(K*(4.5890066303621956933511683018878))):(ye(K*(5.5221204244062436217177491926122))) w p lw 2 lt 125 ti "crossing"

 set key at graph key_x, graph key_y - 139*key_spacing
plot "+" u (xe(K*(6.2415101709228650861405185423791))):(ye(K*(0.8527135661700832036657971002569))) w p lw 2 lt 126 ti "crossing"

 set key at graph key_x, graph key_y - 140*key_spacing
plot "+" u (xe(K*(4.6195315040301654363474881392904))):(ye(K*(5.5155478049860811040616681566462))) w p lw 2 lt 127 ti "crossing"

 set key at graph key_x, graph key_y - 141*key_spacing
plot "+" u (xe(K*(6.238355767166025245273885957431))):(ye(K*(0.82643881167991584124621340379235))) w p lw 2 lt 128 ti "crossing"

 set key at graph key_x, graph key_y - 142*key_spacing
plot "+" u (xe(K*(5.7228920374858844866139406803995))):(ye(K*(5.8168883273120810528666879690718))) w p lw 2 lt 129 ti "crossing"

 set key at graph key_x, graph key_y - 143*key_spacing
plot "+" u (xe(K*(6.2408568862380722208627048530616))):(ye(K*(0.84878287659970930167929736853694))) w p lw 2 lt 130 ti "crossing"

 set key at graph key_x, graph key_y - 144*key_spacing
plot "+" u (xe(K*(5.7081385686558618886010663118213))):(ye(K*(5.8025653282010534184109928901307))) w p lw 2 lt 131 ti "crossing"

 set key at graph key_x, graph key_y - 145*key_spacing
plot "+" u (xe(K*(6.2414153312200175705015681160148))):(ye(K*(0.8540654847815706274261060571007))) w p lw 2 lt 132 ti "crossing"

 set key at graph key_x, graph key_y - 146*key_spacing
plot "+" u (xe(K*(5.7177500188716257056853464746382))):(ye(K*(5.8118331393501829751357945497148))) w p lw 2 lt 133 ti "crossing"

 set key at graph key_x, graph key_y - 147*key_spacing
plot "+" u (xe(K*(6.2412749513214595964427644503303))):(ye(K*(0.85272603010211078800040240821545))) w p lw 2 lt 134 ti "crossing"

 set key at graph key_x, graph key_y - 148*key_spacing
plot "+" u (xe(K*(4.5961687301049600762326008407399))):(ye(K*(5.5463977070373520206203465932049))) w p lw 2 lt 135 ti "crossing"

 set key at graph key_x, graph key_y - 149*key_spacing
plot "+" u (xe(K*(6.241276203341262096557784389006))):(ye(K*(0.85273794147021941824959867517464))) w p lw 2 lt 136 ti "crossing"

 set key at graph key_x, graph key_y - 150*key_spacing
plot "+" u (xe(K*(4.6264083544929537339385205996223))):(ye(K*(5.5391399661873137461043370421976))) w p lw 2 lt 137 ti "crossing"

 set key at graph key_x, graph key_y - 151*key_spacing
plot "+" u (xe(K*(6.2423568268219247201500365918037))):(ye(K*(0.8667900542286400833447146396793))) w p lw 2 lt 138 ti "crossing"

 set key at graph key_x, graph key_y - 152*key_spacing
plot "+" u (xe(K*(5.6958758964833302584906959964428))):(ye(K*(5.7913578408831609678486529446673))) w p lw 2 lt 139 ti "crossing"

 set key at graph key_x, graph key_y - 153*key_spacing
plot "+" u (xe(K*(6.2414812667972201509769547556061))):(ye(K*(0.85723521017970638613547862405539))) w p lw 2 lt 140 ti "crossing"

 set key at graph key_x, graph key_y - 154*key_spacing
plot "+" u (xe(K*(5.7171325803961483558168765739538))):(ye(K*(5.8112925683895522155353319249116))) w p lw 2 lt 141 ti "crossing"

 set key at graph key_x, graph key_y - 155*key_spacing
plot "+" u (xe(K*(6.2410547807640144313268137921114))):(ye(K*(0.85275302332249425241172957612434))) w p lw 2 lt 142 ti "crossing"

 set key at graph key_x, graph key_y - 156*key_spacing
plot "+" u (xe(K*(4.5981522143615061182231329439674))):(ye(K*(5.5531404357212750255712307989597))) w p lw 2 lt 143 ti "crossing"

 set key at graph key_x, graph key_y - 157*key_spacing
plot "+" u (xe(K*(6.2410555386499382279907877091318))):(ye(K*(0.85276089693417322923352230645833))) w p lw 2 lt 144 ti "crossing"

 set key at graph key_x, graph key_y - 158*key_spacing
plot "+" u (xe(K*(4.6283137737295128033565561054274))):(ye(K*(5.545693169934274635579640744254))) w p lw 2 lt 145 ti "crossing"

 set key at graph key_x, graph key_y - 159*key_spacing
plot "+" u (xe(K*(6.2414492096461158254783185839187))):(ye(K*(0.85564931152200063291246578955906))) w p lw 2 lt 146 ti "crossing"

 set key at graph key_x, graph key_y - 160*key_spacing
plot "+" u (xe(K*(5.720722870910153190493474539835))):(ye(K*(5.8144483065054055614950812014285))) w p lw 2 lt 147 ti "crossing"

 set key at graph key_x, graph key_y - 161*key_spacing
plot "+" u (xe(K*(6.2412008442910549277371501375455))):(ye(K*(0.85273511944247659677387218835065))) w p lw 2 lt 148 ti "crossing"

 set key at graph key_x, graph key_y - 162*key_spacing
plot "+" u (xe(K*(4.6004961425952926035165546636563))):(ye(K*(5.5611173490896010918049796600826))) w p lw 2 lt 149 ti "crossing"

 set key at graph key_x, graph key_y - 163*key_spacing
plot "+" u (xe(K*(6.2412017532759822557864026748575))):(ye(K*(0.85274569009393197394075514239375))) w p lw 2 lt 150 ti "crossing"

 set key at graph key_x, graph key_y - 164*key_spacing
plot "+" u (xe(K*(4.6305634490369653732955157465767))):(ye(K*(5.5534377336452696027890851837583))) w p lw 2 lt 151 ti "crossing"

 set key at graph key_x, graph key_y - 165*key_spacing
plot "+" u (xe(K*(6.2413849241798677880410650686827))):(ye(K*(0.85271253481650821637316539636231))) w p lw 2 lt 152 ti "crossing"

 set key at graph key_x, graph key_y - 166*key_spacing
plot "+" u (xe(K*(4.6151686236346467495650358614512))):(ye(K*(5.6111937334115307152160312398337))) w p lw 2 lt 153 ti "crossing"

 set key at graph key_x, graph key_y - 167*key_spacing
plot "+" u (xe(K*(6.2413852468909976067834577406757))):(ye(K*(0.85272658565811110253918059243006))) w p lw 2 lt 154 ti "crossing"

 set key at graph key_x, graph key_y - 168*key_spacing
plot "+" u (xe(K*(4.6446497927237571090586243371945))):(ye(K*(5.6020432610821613295115639630239))) w p lw 2 lt 155 ti "crossing"

 set key at graph key_x, graph key_y - 169*key_spacing
plot "+" u (xe(K*(6.2406265429281386758475491660647))):(ye(K*(0.85280543062200009352125107398024))) w p lw 2 lt 156 ti "crossing"

 set key at graph key_x, graph key_y - 170*key_spacing
plot "+" u (xe(K*(1.709771084128319351691516203573))):(ye(K*(4.8323000008159713303257376537658))) w p lw 2 lt 157 ti "crossing"

	
 set key at graph key_x, graph key_y - 1*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 5.9458043846890671346727685886435, 6.1033453850680494667813036357984, 1.1965015776790313140054422547109)), ye(K*phi_cea(t, 5.9458043846890671346727685886435, 6.1033453850680494667813036357984, 1.1965015776790313140054422547109)) smo csp dashtype 1 lt 1 ti "sun 2021-11-18 11:04:27 TAI, 1"

 set key at graph key_x, graph key_y - 2*key_spacing
plot [0.:2.0967510057130445133566354343202 - epsilon] xe(K*lambda_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916)), ye(K*phi_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916)) smo csp dashtype 2 lt 2 ti "moon 2021-11-22 20:10:15 TAI, 2"
plot [2.0967510057130445133566354343202 + epsilon:2.*pi] xe(K*lambda_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916)), ye(K*phi_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916)) smo csp dashtype 2 lt 2 noti 

 set key at graph key_x, graph key_y - 3*key_spacing
plot [0.:2.2127996949071526699981404817663 - epsilon] xe(K*lambda_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018)), ye(K*phi_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018)) smo csp dashtype 3 lt 3 ti "moon 2021-11-22 20:16:35 TAI, 3"
plot [2.2127996949071526699981404817663 + epsilon:2.*pi] xe(K*lambda_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018)), ye(K*phi_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018)) smo csp dashtype 3 lt 3 noti 

 set key at graph key_x, graph key_y - 4*key_spacing
plot [0.:2.357815954991325124723289263784 - epsilon] xe(K*lambda_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947)), ye(K*phi_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947)) smo csp dashtype 4 lt 4 ti "moon 2021-11-22 20:24:15 TAI, 4"
plot [2.357815954991325124723289263784 + epsilon:2.*pi] xe(K*lambda_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947)), ye(K*phi_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947)) smo csp dashtype 4 lt 4 noti 

 set key at graph key_x, graph key_y - 5*key_spacing
plot [0.:2.4364303675424832107410111348145 - epsilon] xe(K*lambda_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823)), ye(K*phi_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823)) smo csp dashtype 5 lt 5 ti "moon 2021-11-22 20:28:21 TAI, 5"
plot [2.4364303675424832107410111348145 + epsilon:2.*pi] xe(K*lambda_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823)), ye(K*phi_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823)) smo csp dashtype 5 lt 5 noti 

 set key at graph key_x, graph key_y - 6*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 0.36428723187573519570747748730355, 4.8731691818565536777896340936422, 1.1682728567424427446042045630747)), ye(K*phi_cea(t, 0.36428723187573519570747748730355, 4.8731691818565536777896340936422, 1.1682728567424427446042045630747)) smo csp dashtype 6 lt 6 ti "moon 2021-11-25 23:37:35 TAI, 6"

 set key at graph key_x, graph key_y - 7*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 0.36413553486959349125839935368276, 4.8882974495293218808456003898755, 1.1582788260683256620353631660691)), ye(K*phi_cea(t, 0.36413553486959349125839935368276, 4.8882974495293218808456003898755, 1.1582788260683256620353631660691)) smo csp dashtype 7 lt 7 ti "moon 2021-11-25 23:41:010 TAI, 2021-12-08 12:19:36"

 set key at graph key_x, graph key_y - 8*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 0.36385160463452387302751844799786, 4.9165838856439645354612366645597, 1.1397743596544782640478388202609)), ye(K*phi_cea(t, 0.36385160463452387302751844799786, 4.9165838856439645354612366645597, 1.1397743596544782640478388202609)) smo csp dashtype 8 lt 8 ti "moon 2021-11-25 23:47:52 TAI, 2021-12-08 12:20:02"

 set key at graph key_x, graph key_y - 9*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 0.36377526002794713377852531266399, 4.9241832475250628675667030620389, 1.1346935233993362679427718830993)), ye(K*phi_cea(t, 0.36377526002794713377852531266399, 4.9241832475250628675667030620389, 1.1346935233993362679427718830993)) smo csp dashtype 9 lt 9 ti "moon 2021-11-25 23:49:40 TAI, 2021-12-08 12:20:49"

 set key at graph key_x, graph key_y - 10*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 0.36368262000294437896741328586359, 4.9334010038854438917610423231963, 1.128802775164488014780772573431)), ye(K*phi_cea(t, 0.36368262000294437896741328586359, 4.9334010038854438917610423231963, 1.128802775164488014780772573431)) smo csp dashtype 10 lt 10 ti "moon 2021-11-25 23:51:51 TAI, 2021-12-08 12:21:23"

 set key at graph key_x, graph key_y - 11*key_spacing
plot [0.:2.*pi] xe(K*lambda_cea(t, 0.3631245137862348926205413590651, 4.9888485445840453635923950059805, 1.0928665422089289815943402572884)), ye(K*phi_cea(t, 0.3631245137862348926205413590651, 4.9888485445840453635923950059805, 1.0928665422089289815943402572884)) smo csp dashtype 11 lt 11 ti "moon 2021-11-26 00:04:59 TAI, 2021-12-08 12:22:02"

 set key at graph key_x, graph key_y - 12*key_spacing
plot [0.:3.3014934267508220244735639425926 - epsilon] xe(K*lambda_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928)), ye(K*phi_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928)) smo csp dashtype 12 lt 12 ti "sun 2021-11-29 10:56:14 TAI, 2021-12-08 12:22:42"
plot [3.3014934267508220244735639425926 + epsilon:2.*pi] xe(K*lambda_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928)), ye(K*phi_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928)) smo csp dashtype 12 lt 12 noti 

 set key at graph key_x, graph key_y - 13*key_spacing
plot [0.:3.2821033807366797319104989583138 - epsilon] xe(K*lambda_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968)), ye(K*phi_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968)) smo csp dashtype 13 lt 13 ti "sun 2021-11-29 11:02:40 TAI, 2021-12-08 12:23:16"
plot [3.2821033807366797319104989583138 + epsilon:2.*pi] xe(K*lambda_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968)), ye(K*phi_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968)) smo csp dashtype 13 lt 13 noti 


	x_max_old = GPVAL_X_MAX;

        set print "boundary.txt";
	print "GPVAL_X_MIN = ", GPVAL_X_MIN, "\n", "GPVAL_X_MAX = ", GPVAL_X_MAX, "\n", "GPVAL_Y_MIN = ", GPVAL_Y_MIN, "\n", "GPVAL_Y_MAX = ", GPVAL_Y_MAX, "\n", "minimal longitude = ", label_deg_min_c_lib(lambda_min), "\n", "maximal longitude = ", label_deg_min_c_lib(lambda_max), "\n", "minimal latitude = ", label_deg_min_c_lib(phi_min), "\n", "maximal latitude = ", label_deg_min_c_lib(phi_max), "\n";
	unset print;
	system("chmod 777 boundary.txt");

	}


    	pause 1e-1      # waiting time in seconds
}
