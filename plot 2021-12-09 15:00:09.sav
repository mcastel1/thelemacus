reset 

#notes:
#to kill all gnuplot processes type: pkill -9 gnuplot
#- using webgeocals improves agreement between circle of equal altitude and true position by ~ 100 m
#do not use stellarium to compute hour angle and declination: they are calculated with the reference frame sitting on the surface of the earth at the observer's location! 
#here 0 <= lambda < 360.0, and it grows in the W direction
#notes
#this command is such that when two points of a curve are both outisde the plotting window, the line that joins them is plotted
set clip two
K = 360.0/(2.0*pi);
k = 1.0/K;
N = 6.0;
#circles of equal altitude are plotted with S points
S = 1e3;
n_points_coastline = 200000;
epsilon=1e-10
myint(x) = x>0.0 ? int(x) : int(x)-1.0
clint(x) = abs(x-myint(x))<abs(x-(myint(x)+1.)) ? myint(x) : myint(x)+1.
#extracts degrees and minutes from floating-point angle in degree format
degrees(x) = floor(x);
minutes(x) = (x > 0.0 ? (x - floor(x))*60.0 : (1.0 - (x - floor(x)))*60.0)
is_int(x) = ((( abs(x - floor(x)) < epsilon ) || ( abs(x - ceil(x)) < epsilon)) ? 1 : 0)
key_y = 0.98;
key_x = 0.07;
key_spacing = 0.04;


#Mercator for the sphere
#MINUS SIGN ADDED BY HAND TO FLIP THE MAP
xe(lambda) =  (-1.0) * ( ((0.0 <= lambda) & (lambda < 180.0)) ? lambda: lambda - 360.0 )*k
ye(phi) = (log(1./cos(phi*k) + tan(phi*k)))
lambda_inv(xe) = ( ((xe <= 0.0) & (xe > -pi)) ? -xe*K: -xe*K + 360.0 )
#given xe, this returns the corresponding lambda in non-standard format, i.e., lying in the interval [-pi, pi)
lambda_inv_pm(xe) = -xe*K 
phi_inv(ye) = K*atan(sinh(ye))	

myf(x,y)=sprintf("%g\260 %g' %s , %g\260 %g' %s", myint(abs(phi_inv(y))), (abs(phi_inv(y)) - myint(abs(phi_inv(y))))*60.0, (phi_inv(y) > 0.0 ? 'N': 'S'), myint(abs(lambda_inv_pm(x))), (abs(lambda_inv_pm(x)) - myint(abs(lambda_inv_pm(x))))*60.0, ((lambda_inv_pm(x) > 0.0) ? 'W': 'E'))
set mouse mouseformat function myf(x, y)
set mouse mouseformat 8


#clear
set parametric
set multiplot

set size ratio -1
set key top left
#size of minor x and y tics with respect to screen size (1 = tic as long as screen size)
mtics_size = 0.01
set xtics rotate by 45 offset 0,graph -0.09

set format x "";     
set xtics ();

set format y "";     
set ytics ();

set ticscale 3,1
set samples S
#increments in degrees
increment_phi = 20.0;
increment_lambda = 60.0;
list(start,end,increment)=system(sprintf("seq %g %g %g", start, increment, end))


#set tics scale 0

#latitude and longitude for a circle of equal altitude whose ground position has coordinates d, GHA, and whose angular aperture is omega
phi_cea(t, d, GHA, omega) =pi/2.-acos(cos(omega) * sin(d)-cos(d) * cos(t) * sin(omega))
lambda_cea(t, d, GHA, omega) = ( lambda = -(atan((-sin(GHA) * (cos(d)* cos(omega)+cos(t) * sin(d) * sin(omega))+cos(GHA) * sin(omega) * sin(t))/(cos(d) * cos(GHA) * cos(omega)+sin(omega)*  (cos(GHA) * cos(t) * sin(d)+sin(GHA)* sin(t)))) + (cos(d)* cos(GHA)* cos(omega) +  sin(omega) * (cos(GHA)* cos(t) * sin(d) + sin(GHA)  *sin(t)) >0.0 ? 0.0 : pi)) , lambda - 2.0*pi*floor(lambda/(2.0*pi)))

#latitude and longitude for an orthodrome whose starting point has coordinates d, GHA and whose initial heading is a
phi_lox(l, d, GHA, a, Re) = ( ( (( (0.0 <= a) && (a < pi/2.0) ) || ( (3.0*pi/2.0 <= a) && (a < 2.0*pi) )) ? tau = 1 : tau =-1 ), ( ((0.0 <= a) && (a < pi)) ? sigma = -1 : sigma = 1 ), C = (cos(a))**2.0, t = -tau*sqrt((1.0-C)/C) * log( sqrt((1.0+sin(d))/(1.0-sin(d))) * tan( -tau*sqrt(C)*l/(2.0*Re) + atan(sqrt((1.0-sin(d))/(1.0+sin(d)))) ) ), asin( tanh( tau*sqrt(C/(1.0-C))*t + atanh(sin(d)) ) ) )

lambda_lox(l, d, GHA, a, Re) = ( ( (( (0.0 <= a) && (a < pi/2.0) ) || ( (3.0*pi/2.0 <= a) && (a < 2.0*pi) )) ? tau = 1 : tau =-1 ), ( ((0.0 <= a) && (a < pi)) ? sigma = -1 : sigma = 1 ), C = (cos(a))**2.0, t = -tau*sqrt((1.0-C)/C) * log( sqrt((1.0+sin(d))/(1.0-sin(d))) * tan( -tau*sqrt(C)*l/(2.0*Re) + atan(sqrt((1.0-sin(d))/(1.0+sin(d)))) ) ), lambda = GHA + sigma*t, lambda - 2.0*pi*floor(lambda/(2.0*pi)) )


#latitude and longitude for an orthodrome whose starting point has coordinates d, GHA and whose initial heading is a
phi_ort(l, d, GHA, a, Re) = asin(cos(a) * cos(d) * sin(l/Re) + cos(l/Re) * sin(d))
lambda_ort(l, d, GHA, a, Re) = (lambda = - (atan((cos(GHA) * sin(l/Re) * sin(a) + sin(GHA) * (-cos(l/Re) * cos(d) +  cos(a) * sin(l/Re) * sin(d)))/( cos(l/Re) * cos(GHA) * cos(d) +  sin(l/Re) * (sin(a) * sin(GHA) -  cos(a) * cos(GHA) * sin(d)))) + ( ( cos(l/Re) * cos(GHA) * cos(d) + sin(l/Re) * (sin(a) * sin(GHA) - cos(a) * cos(GHA) * sin(d)) ) >= 0.0 ? 0.0 : pi ) ), lambda - 2.0*pi*floor(lambda/(2.0*pi)))

#angles are in degrees
#lambda_min is the angle which corresponds to the leftmost x coordinate x_min in the Mercator plot, and simiarly for lambda_max
lambda_min = 170.20750000000001023181539494544;
lambda_max = 190.00016666666667219942610245198;
phi_min = 310.23166666666668334073619917035;
phi_max = 80.886666666666670266749861184508;

set xrange [xe(lambda_min):xe(lambda_max)]
set yrange [ye(phi_min):ye(phi_max)]

dx = ye((phi_min+phi_max)/2.0+1./60.) -  ye((phi_min+phi_max)/2.0)

set style arrow 1 nohead ls 1 lw 1 linecolor rgb 'black'
set style arrow 2 nohead ls 1 lw 1 linecolor rgb 'gray'


label_rose(n) = sprintf("\\scalebox{0.3}{$\\color{mygray}{%d}$}",n)
label_deg_latitude(x) = ( x == 0.0 ) ? sprintf("0\260") : ( x > 0.0 ? sprintf("%.f\260 N", x - myint(x/360.0)*360.0) : sprintf("%.f\260 S", ((-x) - myint((-x)/360.0)*360.0)) )
label_deg_longitude(x) = ( x == 0.0 ) ? sprintf("0\260") : ( x < 180.0 ? sprintf("%.f\260 W", x - myint(x/360.0)*360.0) : sprintf("%.f\260 E", 360.0 - (x - myint(x/360.0)*360.0)) )
#this prints the arcminutes only of angle x
label_min(x) = sprintf("%.f'", minutes(x) ) 
#if the arcminutes are zero, I print out only the degrees for clarity
label_deg_min(x) =  ( minutes(x) == 0.0 ? sprintf("%.f\260", degrees(x)) : sprintf("%.f\260 %.f'", degrees(x), minutes(x)) )
#this function outputs angle x in the format which can be read from file from lib.h 
label_deg_min_c_lib(x) = sprintf("%.fÂ° %.f'", degrees(x), minutes(x))


#GPS position
#lambda0 = 360.0 -(2.0 + 24./60. + 26.07/(60.**2.))
#phi0 = 48.0 + 51./60. + 19.63/(60.**2.)
#set object circle at  xe(lambda0),ye(phi0) radius char 1  fillcolor rgb 'red' fillstyle solid noborder

#coastlines
#	plot   '/Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt' u (xe($2)):(ye($1)) w d linecolor rgb "gray" noti
p 0,0 w l noti

#unset parametric
unset multiplot

x_max_old = 0.0;

while(1){

	if(GPVAL_X_MAX!=x_max_old){


	unset arrow;
	set bmargin 6;
	

	#print "Recalculating tics ... ";

	lambda_min = lambda_inv(GPVAL_X_MIN);
	lambda_max = lambda_inv(GPVAL_X_MAX);
	
	phi_min = phi_inv(GPVAL_Y_MIN);
	phi_max = phi_inv(GPVAL_Y_MAX);

	set xrange [xe(lambda_min):xe(lambda_max)]
	set yrange [ye(phi_min):ye(phi_max)]

	phi_span = phi_max - phi_min;
	lambda_span = -(-(GPVAL_X_MAX - GPVAL_X_MIN)*K);
	
	#print "lambda in [" , lambda_min , " , " , lambda_max , "]";
	#print "phi in [" , phi_min , " , " , phi_max , "]";

	#print "x in [" , GPVAL_X_MIN , " , " , GPVAL_X_MAX , "]";
	#print "y in [" , GPVAL_Y_MIN , " , " , GPVAL_Y_MAX , "]";


	#print "Determining dlambda ...";

	#gamma_lambda is the compression factor which allows from switching from increments in degrees to increments in arcminutes
	if(lambda_span > 1.0){gamma_lambda = 1.0;}
	else{gamma_lambda = 60.0;}

	dlambda=1.0/gamma_lambda;
	while(N*dlambda<lambda_span){
	#print dlambda;
	if(dlambda == 1.0/gamma_lambda){dlambda = dlambda + 4.0/gamma_lambda;}
	else{dlambda = dlambda + 5.0/gamma_lambda;}
	}
	if(dlambda > 1.0/gamma_lambda){
		   if(dlambda == 5.0/gamma_lambda){dlambda = dlambda - 4.0/gamma_lambda;}
		   else{dlambda = dlambda - 5.0/gamma_lambda;}
	}
	#print "... dlambda = " , dlambda;


	#print "Determining dphi ...";
	#print "phi_span = ", phi_span;

	#gamma_phi is the compression factor which allows from switching from increments in degrees to increments in arcminutes
	if(phi_span > 1.0){gamma_phi = 1.0;}
	else{gamma_phi = 60.0;}
	
	dphi=1.0/gamma_phi;
	while(N*dphi<phi_span){
		#print dphi;
		if(dphi == 1.0/gamma_phi){dphi = dphi + 4.0/gamma_phi;}
		else{dphi = dphi + 5.0/gamma_phi;}
	}
	if(dphi > 1.0/gamma_phi){
		   if(dphi == 5.0/gamma_phi){dphi = dphi - 4.0/gamma_phi;}
		   else{dphi = dphi - 5.0/gamma_phi;}
	}
	#print "... dphi = " , dphi;



	#print "Setting xtics at dlambda intervals:";

	set format x "";     
	set xtics ();

	lambda= (int(lambda_min/dlambda))*dlambda;
	x = xe(lambda);

	#plot the first few custom-made myxics close to the left edge of the x axis. Here I consider 		x = x + dlambda*k (the first value of x which is an 'integer multiple of dlambda' and which is contained in the x axis), and then decrease it by one tenth of arcminute in the while loop
	if(gamma_lambda == 60.0){
					i=0.0;
					while(x + (dlambda + (i/10.0)*1.0/60.0)*k > GPVAL_X_MIN){
				             #set custom-made minor xtics every tenths (i/10.0) of arcminutes (1.0/60.0) 
					     set arrow from first x + (dlambda + (i/10.0)*1.0/60.0)*k, graph 0 to first x + (dlambda + (i/10.0)*1.0/60.0)*k, graph mtics_size nohead  linecolor "blue";
					     i=i-1.0;
					}
			 	   
	}


	while(x <= GPVAL_X_MAX){
 
		lambda = lambda_inv(x);

		if(x >= GPVAL_X_MIN){

		          if(is_int(lambda) == 1){
		       		      set xtics add (label_deg_longitude(lambda) x);
		          }else{
		       		      set xtics add (label_min(lambda) x);
		          }

			  if(gamma_lambda == 60.0){
			  	   i=0.0;
				   #plot the custom-made xtics from x to the next x (x + dlambda*k)
				   while(x + (i/10.0)*1.0/60.0*k <  x + dlambda*k){
					if(x + (i/10.0)*1.0/60.0*k <= GPVAL_X_MAX){
					     #set custom-made minor xtics every tenths (i/10.0) of arcminutes (1.0/60.0) 
					     set arrow from first x + (i/10.0)*1.0/60.0*k, graph 0 to first x + (i/10.0)*1.0/60.0*k, graph mtics_size nohead  linecolor "blue";
					}
					i=i+1.0;
			 	   }
		          }


			  set arrow from first x, graph 0 to first x, graph 1 nohead  linecolor "gray";


		}

		
		#print lambda_inv(x);
		x = x + dlambda*k;
		#lambda = lambda + dlambda;

	}




 
	#if(dlambda == 1.0){
	#	print "Setting mxtics";
	#	set mxtics 60;
	#	show mxtics;
	#}


	#print "Setting ytics at dphi intervals:";
	


	clear;

	set multiplot	
	#coastlines
	#set the values lambda_min_get_coastline_data,  lambda_max_get_coastline_data which I will feed into get_coastline_data.cpp
	if((lambda_min < 180.0) && (lambda_max >= 180.0)){
		lambda_min_get_coastline_data = lambda_max - 360.0;
		lambda_max_get_coastline_data = lambda_min;
	}else{
		lambda_min_get_coastline_data = lambda_max;
		lambda_max_get_coastline_data = lambda_min;
	}

	#fetch coastline data in path_file_coastline_data_blocked, and produce file path_file_selected_coastline_data which contains n_points_coastline points of the coastline of the world
	system(sprintf("./get_coastline_data.o -p %g -P %g -l %g -L %g -N %g > /dev/null 2>&1", floor(phi_min), floor(phi_max), floor(lambda_min_get_coastline_data), floor(lambda_max_get_coastline_data), n_points_coastline));


	set key top right
plot [0.:2.*pi] "+" u (xe(K*lambda_cea(t, 5.9458043846890671346727685886435, 6.1033453850680494667813036357984, 1.1965015776790313140054422547109))) : (ye(K*phi_cea(t, 5.9458043846890671346727685886435, 6.1033453850680494667813036357984, 1.1965015776790313140054422547109))) w l dashtype 1 lt 1 ti "sun 2021-11-18 11:04:27 TAI, 1",\
[0.:2.0967510057130445133566354343202 - epsilon] "+" u (xe(K*lambda_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916))) : (ye(K*phi_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916))) w l dashtype 2 lt 2 ti "moon 2021-11-22 20:10:15 TAI, 2" ,\
[2.0967510057130445133566354343202 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916))) : (ye(K*phi_cea(t, 0.45963286018061755289210168484715, 4.6311876002085101688976465084124, 1.2547233343954564688260688853916))) w l dashtype 2 lt 2 noti,\
[0.:2.2127996949071526699981404817663 - epsilon] "+" u (xe(K*lambda_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018))) : (ye(K*phi_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018))) w l dashtype 3 lt 3 ti "moon 2021-11-22 20:16:35 TAI, 3" ,\
[2.2127996949071526699981404817663 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018))) : (ye(K*phi_cea(t, 0.45964271965307756939722594324849, 4.6578815590020781201019417494535, 1.2384329612680631260701602514018))) w l dashtype 3 lt 3 noti,\
[0.:2.357815954991325124723289263784 - epsilon] "+" u (xe(K*lambda_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947))) : (ye(K*phi_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947))) w l dashtype 4 lt 4 ti "moon 2021-11-22 20:24:15 TAI, 4" ,\
[2.357815954991325124723289263784 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947))) : (ye(K*phi_cea(t, 0.45965410390283256703014558297582, 4.6901952572471730107395160302985, 1.218103602515706374020965085947))) w l dashtype 4 lt 4 noti,\
[0.:2.4364303675424832107410111348145 - epsilon] "+" u (xe(K*lambda_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823))) : (ye(K*phi_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823))) w l dashtype 5 lt 5 ti "moon 2021-11-22 20:28:21 TAI, 5" ,\
[2.4364303675424832107410111348145 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823))) : (ye(K*phi_cea(t, 0.45965994437298329788887940594577, 4.7074760426874195928803601418622, 1.2071966489557677260080481573823))) w l dashtype 5 lt 5 noti,\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.36428723187573519570747748730355, 4.8731691818565536777896340936422, 1.1682728567424427446042045630747))) : (ye(K*phi_cea(t, 0.36428723187573519570747748730355, 4.8731691818565536777896340936422, 1.1682728567424427446042045630747))) w l dashtype 6 lt 6 ti "moon 2021-11-25 23:37:35 TAI, 6",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.36413553486959349125839935368276, 4.8882974495293218808456003898755, 1.1582788260683256620353631660691))) : (ye(K*phi_cea(t, 0.36413553486959349125839935368276, 4.8882974495293218808456003898755, 1.1582788260683256620353631660691))) w l dashtype 7 lt 7 ti "moon 2021-11-25 23:41:010 TAI, 2021-12-08 12:19:36",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.36385160463452387302751844799786, 4.9165838856439645354612366645597, 1.1397743596544782640478388202609))) : (ye(K*phi_cea(t, 0.36385160463452387302751844799786, 4.9165838856439645354612366645597, 1.1397743596544782640478388202609))) w l dashtype 8 lt 8 ti "moon 2021-11-25 23:47:52 TAI, 2021-12-08 12:20:02",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.36377526002794713377852531266399, 4.9241832475250628675667030620389, 1.1346935233993362679427718830993))) : (ye(K*phi_cea(t, 0.36377526002794713377852531266399, 4.9241832475250628675667030620389, 1.1346935233993362679427718830993))) w l dashtype 9 lt 9 ti "moon 2021-11-25 23:49:40 TAI, 2021-12-08 12:20:49",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.36368262000294437896741328586359, 4.9334010038854438917610423231963, 1.128802775164488014780772573431))) : (ye(K*phi_cea(t, 0.36368262000294437896741328586359, 4.9334010038854438917610423231963, 1.128802775164488014780772573431))) w l dashtype 10 lt 10 ti "moon 2021-11-25 23:51:51 TAI, 2021-12-08 12:21:23",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.3631245137862348926205413590651, 4.9888485445840453635923950059805, 1.0928665422089289815943402572884))) : (ye(K*phi_cea(t, 0.3631245137862348926205413590651, 4.9888485445840453635923950059805, 1.0928665422089289815943402572884))) w l dashtype 11 lt 11 ti "moon 2021-11-26 00:04:59 TAI, 2021-12-08 12:22:02",\
[0.:3.3014934267508220244735639425926 - epsilon] "+" u (xe(K*lambda_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928))) : (ye(K*phi_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928))) w l dashtype 12 lt 12 ti "sun 2021-11-29 10:56:14 TAI, 2021-12-08 12:22:42" ,\
[3.3014934267508220244735639425926 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928))) : (ye(K*phi_cea(t, 5.9070709914077852431546489242464, 6.0537750895147102170312791713513, 1.2402020787757823683250535395928))) w l dashtype 12 lt 12 noti,\
[0.:3.2821033807366797319104989583138 - epsilon] "+" u (xe(K*lambda_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968))) : (ye(K*phi_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968))) w l dashtype 13 lt 13 ti "sun 2021-11-29 11:02:40 TAI, 2021-12-08 12:23:16" ,\
[3.2821033807366797319104989583138 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968))) : (ye(K*phi_cea(t, 5.9070579707406327685248470515944, 6.0818388809370640402107710542623, 1.2370915054207332062219393264968))) w l dashtype 13 lt 13 noti,\
	"+" u (xe(K*(6.2411274295520877686271887796465))):(ye(K*(0.8526832726340385359975471146754))) w p lw 2 lt 1 ti "MP"

	plot   '/Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt' u (xe($2)):(ye($1)) w d linecolor rgb "black" noti


	x_max_old = GPVAL_X_MAX;

        set print "boundary.txt";
	print "GPVAL_X_MIN = ", GPVAL_X_MIN, "\n", "GPVAL_X_MAX = ", GPVAL_X_MAX, "\n", "GPVAL_Y_MIN = ", GPVAL_Y_MIN, "\n", "GPVAL_Y_MAX = ", GPVAL_Y_MAX, "\n", "minimal longitude = ", label_deg_min_c_lib(lambda_min), "\n", "maximal longitude = ", label_deg_min_c_lib(lambda_max), "\n", "minimal latitude = ", label_deg_min_c_lib(phi_min), "\n", "maximal latitude = ", label_deg_min_c_lib(phi_max), "\n";
	unset print;
	system("chmod 777 boundary.txt");

	}


    	pause 1e-1      # waiting time in seconds
}
