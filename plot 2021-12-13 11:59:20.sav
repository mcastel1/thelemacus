reset 

#notes:
#to kill all gnuplot processes type: pkill -9 gnuplot
#- using webgeocals improves agreement between circle of equal altitude and true position by ~ 100 m
#do not use stellarium to compute hour angle and declination: they are calculated with the reference frame sitting on the surface of the earth at the observer's location! 
#here 0 <= lambda < 360.0, and it grows in the W direction
#notes
#this command is such that when two points of a curve are both outisde the plotting window, the line that joins them is plotted
set clip two
K = 360.0/(2.0*pi);
k = 1.0/K;
N = 6.0;
#circles of equal altitude are plotted with S points
S = 1e3;
n_points_coastline = 200000;
epsilon=1e-10
myint(x) = x>0.0 ? int(x) : int(x)-1.0
clint(x) = abs(x-myint(x))<abs(x-(myint(x)+1.)) ? myint(x) : myint(x)+1.
#extracts degrees and minutes from floating-point angle in degree format
degrees(x) = floor(x);
minutes(x) = (x > 0.0 ? (x - floor(x))*60.0 : (1.0 - (x - floor(x)))*60.0)
is_int(x) = ((( abs(x - floor(x)) < epsilon ) || ( abs(x - ceil(x)) < epsilon)) ? 1 : 0)
key_y = 0.98;
key_x = 0.07;
key_spacing = 0.04;


#Mercator for the sphere
#MINUS SIGN ADDED BY HAND TO FLIP THE MAP
xe(lambda) =  (-1.0) * ( ((0.0 <= lambda) & (lambda < 180.0)) ? lambda: lambda - 360.0 )*k
ye(phi) = (log(1./cos(phi*k) + tan(phi*k)))
lambda_inv(xe) = ( ((xe <= 0.0) & (xe > -pi)) ? -xe*K: -xe*K + 360.0 )
#given xe, this returns the corresponding lambda in non-standard format, i.e., lying in the interval [-pi, pi)
lambda_inv_pm(xe) = -xe*K 
phi_inv(ye) = K*atan(sinh(ye))	

myf(x,y)=sprintf("%g\260 %g' %s , %g\260 %g' %s", myint(abs(phi_inv(y))), (abs(phi_inv(y)) - myint(abs(phi_inv(y))))*60.0, (phi_inv(y) > 0.0 ? 'N': 'S'), myint(abs(lambda_inv_pm(x))), (abs(lambda_inv_pm(x)) - myint(abs(lambda_inv_pm(x))))*60.0, ((lambda_inv_pm(x) > 0.0) ? 'W': 'E'))
set mouse mouseformat function myf(x, y)
set mouse mouseformat 8


#clear
set parametric
set multiplot

set size ratio -1
set key top left
#size of minor x and y tics with respect to screen size (1 = tic as long as screen size)
mtics_size = 0.01
set xtics rotate by 45 offset 0,graph -0.09

set format x "";     
set xtics ();

set format y "";     
set ytics ();

set ticscale 3,1
set samples S
#increments in degrees
increment_phi = 20.0;
increment_lambda = 60.0;
list(start,end,increment)=system(sprintf("seq %g %g %g", start, increment, end))


#set tics scale 0

#latitude and longitude for a circle of equal altitude whose ground position has coordinates d, GHA, and whose angular aperture is omega
phi_cea(t, d, GHA, omega) =pi/2.-acos(cos(omega) * sin(d)-cos(d) * cos(t) * sin(omega))
lambda_cea(t, d, GHA, omega) = ( lambda = -(atan((-sin(GHA) * (cos(d)* cos(omega)+cos(t) * sin(d) * sin(omega))+cos(GHA) * sin(omega) * sin(t))/(cos(d) * cos(GHA) * cos(omega)+sin(omega)*  (cos(GHA) * cos(t) * sin(d)+sin(GHA)* sin(t)))) + (cos(d)* cos(GHA)* cos(omega) +  sin(omega) * (cos(GHA)* cos(t) * sin(d) + sin(GHA)  *sin(t)) >0.0 ? 0.0 : pi)) , lambda - 2.0*pi*floor(lambda/(2.0*pi)))

#latitude and longitude for an orthodrome whose starting point has coordinates d, GHA and whose initial heading is a
phi_lox(l, d, GHA, a, Re) = ( ( (( (0.0 <= a) && (a < pi/2.0) ) || ( (3.0*pi/2.0 <= a) && (a < 2.0*pi) )) ? tau = 1 : tau =-1 ), ( ((0.0 <= a) && (a < pi)) ? sigma = -1 : sigma = 1 ), C = (cos(a))**2.0, t = -tau*sqrt((1.0-C)/C) * log( sqrt((1.0+sin(d))/(1.0-sin(d))) * tan( -tau*sqrt(C)*l/(2.0*Re) + atan(sqrt((1.0-sin(d))/(1.0+sin(d)))) ) ), asin( tanh( tau*sqrt(C/(1.0-C))*t + atanh(sin(d)) ) ) )

lambda_lox(l, d, GHA, a, Re) = ( ( (( (0.0 <= a) && (a < pi/2.0) ) || ( (3.0*pi/2.0 <= a) && (a < 2.0*pi) )) ? tau = 1 : tau =-1 ), ( ((0.0 <= a) && (a < pi)) ? sigma = -1 : sigma = 1 ), C = (cos(a))**2.0, t = -tau*sqrt((1.0-C)/C) * log( sqrt((1.0+sin(d))/(1.0-sin(d))) * tan( -tau*sqrt(C)*l/(2.0*Re) + atan(sqrt((1.0-sin(d))/(1.0+sin(d)))) ) ), lambda = GHA + sigma*t, lambda - 2.0*pi*floor(lambda/(2.0*pi)) )


#latitude and longitude for an orthodrome whose starting point has coordinates d, GHA and whose initial heading is a
phi_ort(l, d, GHA, a, Re) = asin(cos(a) * cos(d) * sin(l/Re) + cos(l/Re) * sin(d))
lambda_ort(l, d, GHA, a, Re) = (lambda = - (atan((cos(GHA) * sin(l/Re) * sin(a) + sin(GHA) * (-cos(l/Re) * cos(d) +  cos(a) * sin(l/Re) * sin(d)))/( cos(l/Re) * cos(GHA) * cos(d) +  sin(l/Re) * (sin(a) * sin(GHA) -  cos(a) * cos(GHA) * sin(d)))) + ( ( cos(l/Re) * cos(GHA) * cos(d) + sin(l/Re) * (sin(a) * sin(GHA) - cos(a) * cos(GHA) * sin(d)) ) >= 0.0 ? 0.0 : pi ) ), lambda - 2.0*pi*floor(lambda/(2.0*pi)))

#angles are in degrees
#lambda_min is the angle which corresponds to the leftmost x coordinate x_min in the Mercator plot, and simiarly for lambda_max
lambda_min = 170.1999999999999886313162278384;
lambda_max = 190;
phi_min = 300.76666666666665150842163711786;
phi_max = 80.883333333333339965065533760935;

set xrange [xe(lambda_min):xe(lambda_max)]
set yrange [ye(phi_min):ye(phi_max)]

dx = ye((phi_min+phi_max)/2.0+1./60.) -  ye((phi_min+phi_max)/2.0)

set style arrow 1 nohead ls 1 lw 1 linecolor rgb 'black'
set style arrow 2 nohead ls 1 lw 1 linecolor rgb 'gray'


label_rose(n) = sprintf("\\scalebox{0.3}{$\\color{mygray}{%d}$}",n)
label_deg_latitude(x) = ( x == 0.0 ) ? sprintf("0\260") : ( x > 0.0 ? sprintf("%.f\260 N", x - myint(x/360.0)*360.0) : sprintf("%.f\260 S", ((-x) - myint((-x)/360.0)*360.0)) )
label_deg_longitude(x) = ( x == 0.0 ) ? sprintf("0\260") : ( x < 180.0 ? sprintf("%.f\260 W", x - myint(x/360.0)*360.0) : sprintf("%.f\260 E", 360.0 - (x - myint(x/360.0)*360.0)) )
#this prints the arcminutes only of angle x
label_min(x) = sprintf("%.f'", minutes(x) ) 
#if the arcminutes are zero, I print out only the degrees for clarity
label_deg_min(x) =  ( minutes(x) == 0.0 ? sprintf("%.f\260", degrees(x)) : sprintf("%.f\260 %.f'", degrees(x), minutes(x)) )
#this function outputs angle x in the format which can be read from file from lib.h 
label_deg_min_c_lib(x) = sprintf("%.fÂ° %.f'", degrees(x), minutes(x))


#GPS position
#lambda0 = 360.0 -(2.0 + 24./60. + 26.07/(60.**2.))
#phi0 = 48.0 + 51./60. + 19.63/(60.**2.)
#set object circle at  xe(lambda0),ye(phi0) radius char 1  fillcolor rgb 'red' fillstyle solid noborder

#coastlines
#	plot   '/Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt' u (xe($2)):(ye($1)) w d linecolor rgb "gray" noti
p 0,0 w l noti

#unset parametric
unset multiplot

x_max_old = 0.0;

while(1){

	if(GPVAL_X_MAX!=x_max_old){


	unset arrow;
	set bmargin 6;
	

	#print "Recalculating tics ... ";

	lambda_min = lambda_inv(GPVAL_X_MIN);
	lambda_max = lambda_inv(GPVAL_X_MAX);
	
	phi_min = phi_inv(GPVAL_Y_MIN);
	phi_max = phi_inv(GPVAL_Y_MAX);

	set xrange [xe(lambda_min):xe(lambda_max)]
	set yrange [ye(phi_min):ye(phi_max)]

	phi_span = phi_max - phi_min;
	lambda_span = -(-(GPVAL_X_MAX - GPVAL_X_MIN)*K);
	
	#print "lambda in [" , lambda_min , " , " , lambda_max , "]";
	#print "phi in [" , phi_min , " , " , phi_max , "]";

	#print "x in [" , GPVAL_X_MIN , " , " , GPVAL_X_MAX , "]";
	#print "y in [" , GPVAL_Y_MIN , " , " , GPVAL_Y_MAX , "]";


	#print "Determining dlambda ...";

	#gamma_lambda is the compression factor which allows from switching from increments in degrees to increments in arcminutes
	if(lambda_span > 1.0){gamma_lambda = 1.0;}
	else{gamma_lambda = 60.0;}

	dlambda=1.0/gamma_lambda;
	while(N*dlambda<lambda_span){
	#print dlambda;
	if(dlambda == 1.0/gamma_lambda){dlambda = dlambda + 4.0/gamma_lambda;}
	else{dlambda = dlambda + 5.0/gamma_lambda;}
	}
	if(dlambda > 1.0/gamma_lambda){
		   if(dlambda == 5.0/gamma_lambda){dlambda = dlambda - 4.0/gamma_lambda;}
		   else{dlambda = dlambda - 5.0/gamma_lambda;}
	}
	#print "... dlambda = " , dlambda;


	#print "Determining dphi ...";
	#print "phi_span = ", phi_span;

	#gamma_phi is the compression factor which allows from switching from increments in degrees to increments in arcminutes
	if(phi_span > 1.0){gamma_phi = 1.0;}
	else{gamma_phi = 60.0;}
	
	dphi=1.0/gamma_phi;
	while(N*dphi<phi_span){
		#print dphi;
		if(dphi == 1.0/gamma_phi){dphi = dphi + 4.0/gamma_phi;}
		else{dphi = dphi + 5.0/gamma_phi;}
	}
	if(dphi > 1.0/gamma_phi){
		   if(dphi == 5.0/gamma_phi){dphi = dphi - 4.0/gamma_phi;}
		   else{dphi = dphi - 5.0/gamma_phi;}
	}
	#print "... dphi = " , dphi;



	#print "Setting xtics at dlambda intervals:";

	set format x "";     
	set xtics ();

	lambda= (int(lambda_min/dlambda))*dlambda;
	x = xe(lambda);

	#plot the first few custom-made myxics close to the left edge of the x axis. Here I consider 		x = x + dlambda*k (the first value of x which is an 'integer multiple of dlambda' and which is contained in the x axis), and then decrease it by one tenth of arcminute in the while loop
	if(gamma_lambda == 60.0){
					i=0.0;
					while(x + (dlambda + (i/10.0)*1.0/60.0)*k > GPVAL_X_MIN){
				             #set custom-made minor xtics every tenths (i/10.0) of arcminutes (1.0/60.0) 
					     set arrow from first x + (dlambda + (i/10.0)*1.0/60.0)*k, graph 0 to first x + (dlambda + (i/10.0)*1.0/60.0)*k, graph mtics_size nohead  linecolor "blue";
					     i=i-1.0;
					}
			 	   
	}


	while(x <= GPVAL_X_MAX){
 
		lambda = lambda_inv(x);

		if(x >= GPVAL_X_MIN){

		          if(is_int(lambda) == 1){
		       		      set xtics add (label_deg_longitude(lambda) x);
		          }else{
		       		      set xtics add (label_min(lambda) x);
		          }

			  if(gamma_lambda == 60.0){
			  	   i=0.0;
				   #plot the custom-made xtics from x to the next x (x + dlambda*k)
				   while(x + (i/10.0)*1.0/60.0*k <  x + dlambda*k){
					if(x + (i/10.0)*1.0/60.0*k <= GPVAL_X_MAX){
					     #set custom-made minor xtics every tenths (i/10.0) of arcminutes (1.0/60.0) 
					     set arrow from first x + (i/10.0)*1.0/60.0*k, graph 0 to first x + (i/10.0)*1.0/60.0*k, graph mtics_size nohead  linecolor "blue";
					}
					i=i+1.0;
			 	   }
		          }


			  set arrow from first x, graph 0 to first x, graph 1 nohead  linecolor "gray";


		}

		
		#print lambda_inv(x);
		x = x + dlambda*k;
		#lambda = lambda + dlambda;

	}




 
	#if(dlambda == 1.0){
	#	print "Setting mxtics";
	#	set mxtics 60;
	#	show mxtics;
	#}


	#print "Setting ytics at dphi intervals:";
	
	set format y "";     
	set ytics ();
	phi = (int(phi_min/dphi))*dphi;

	#plot the first few custom-made mytics close to the lower edge of the y axis. Here I consider phi + dphi (the first value of phi which is an 'integer multiple of dphi' and which is contained in the y axis), and then decrease it by one tenth of arcminute in the while loop
	if(gamma_phi == 60.0){
					i=0.0;
					while(ye(phi + dphi + (i/10.0)*1.0/60.0) >= GPVAL_Y_MIN){
						  #set custom-made minor ytics every tenths (i/10.0) of arcminutes (1.0/60.0) 
		       	 		       	  set arrow from graph 0,first ye(phi + dphi + (i/10.0)*1.0/60.0) to graph mtics_size, first ye(phi + dphi + (i/10.0)*1.0/60.0) nohead  linecolor "blue";
					i=i-1.0;
					}
			 	   
	}

	while(phi<=phi_max){
		if(phi >= phi_min){
		       if(is_int(phi) == 1){
		       		      set ytics add (label_deg_latitude(phi) ye(phi));
		       }else{
		       		      set ytics add (label_min(phi) ye(phi));
		       }

		       if(gamma_phi == 60.0){
			  	   i=0.0;
				   #plot the custom-made ytics from phi to the next phi (phi + dphi)
			 	   while(phi + (i/10.0)*1.0/60.0 < phi + dphi){
					if(phi + (i/10.0)*1.0/60.0 <= phi_max){
						#set custom-made minor ytics every tenths (i/10.0) of arcminutes (1.0/60.0) 
		       	 		       set arrow from graph 0,first ye(phi + (i/10.0)*1.0/60.0) to graph mtics_size, first ye(phi + (i/10.0)*1.0/60.0) nohead  linecolor "blue";
					}
					i=i+1.0;
			 	   }
		       }

		       set arrow from graph 0,first ye(phi) to graph 1, first ye(phi) nohead  linecolor "gray";
		}
		#print phi;
		phi = phi + dphi;


	}


	clear;

	set multiplot	
	#set the values lambda_min_get_coastline_data,  lambda_max_get_coastline_data which I will feed into get_coastline_data.cpp
	if((lambda_min < 180.0) && (lambda_max >= 180.0)){
		lambda_min_get_coastline_data = lambda_max - 360.0;
		lambda_max_get_coastline_data = lambda_min;
	}else{
		lambda_min_get_coastline_data = lambda_max;
		lambda_max_get_coastline_data = lambda_min;
	}

	#fetch coastline data in path_file_coastline_data_blocked, and produce file path_file_selected_coastline_data which contains n_points_coastline points of the coastline of the world
	system(sprintf("./get_coastline_data.o -p %g -P %g -l %g -L %g -N %g > /dev/null 2>&1", floor(phi_min), floor(phi_max), floor(lambda_min_get_coastline_data), floor(lambda_max_get_coastline_data), n_points_coastline));


	set key top right
plot [0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.0016343222782575494989032449666, 0.11276663835826482296109674052786, 1.141854430763873828880150540499))) : (ye(K*phi_cea(t, 6.0016343222782575494989032449666, 0.11276663835826482296109674052786, 1.141854430763873828880150540499))) w l dashtype 1 lt 1 ti "moon 2021-06-21 21:39:32 TAI, Sight was taken at BGC",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.0009779746737130778910795925185, 0.15713928023821471802179416954459, 1.1482621701003250525019439010066))) : (ye(K*phi_cea(t, 6.0009779746737130778910795925185, 0.15713928023821471802179416954459, 1.1482621701003250525019439010066))) w l dashtype 2 lt 2 ti "moon 2021-06-21 21:50:05.99 TAI, Sight was taken at BGC",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.33300635349119828143571453438199, 1.0139375075339236431659628578927, 0.98485670477397313504752673907205))) : (ye(K*phi_cea(t, 0.33300635349119828143571453438199, 1.0139375075339236431659628578927, 0.98485670477397313504752673907205))) w l dashtype 3 lt 3 ti "arcturus 2021-07-06 23:08:53.82 TAI, Sight was taken at BGC",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.39159131251279977181667391050723, 4.9428640643130146159478499612305, 1.1020586841788420073839915858116))) : (ye(K*phi_cea(t, 0.39159131251279977181667391050723, 4.9428640643130146159478499612305, 1.1020586841788420073839915858116))) w l dashtype 4 lt 4 ti "sun 2021-07-08 06:58:23.83 TAI, Sight was taken at MP",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.35951509093697581187498713006789, 4.9806932986108636285393913567532, 1.1007526539896588246847386471927))) : (ye(K*phi_cea(t, 0.35951509093697581187498713006789, 4.9806932986108636285393913567532, 1.1007526539896588246847386471927))) w l dashtype 5 lt 5 ti "sun 2021-07-20 07:08:21.37 TAI, Sight was taken at MP",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 0.35950314151211570923294402746251, 5.0033600725495439576206990750507, 1.0855637586336488453753190697171))) : (ye(K*phi_cea(t, 0.35950314151211570923294402746251, 5.0033600725495439576206990750507, 1.0855637586336488453753190697171))) w l dashtype 6 lt 6 ti "sun 2021-07-20 07:13:33.07 TAI, Sight was taken at MP",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 5.9625679024251265758493900648318, 5.8689068280786935716264451912139, 1.2193068238286202120690404626657))) : (ye(K*phi_cea(t, 5.9625679024251265758493900648318, 5.8689068280786935716264451912139, 1.2193068238286202120690404626657))) w l dashtype 7 lt 7 ti "saturn 2021-07-29 22:46:41.54 TAI, Sight was taken at BGC",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.063554151690781601757862517843, 5.5859356926821757127754608518444, 1.2188204426399313895501563820289))) : (ye(K*phi_cea(t, 6.063554151690781601757862517843, 5.5859356926821757127754608518444, 1.2188204426399313895501563820289))) w l dashtype 8 lt 8 ti "jupiter 2021-07-29 22:58:47.73 TAI, Sight taken at BGC",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.0635515019633130506804263859522, 5.6082477929716620934641468920745, 1.209593407682489463184083433589))) : (ye(K*phi_cea(t, 6.0635515019633130506804263859522, 5.6082477929716620934641468920745, 1.209593407682489463184083433589))) w l dashtype 9 lt 9 ti "jupiter 2021-07-29 23:03:53.62 TAI, Sight was taken at BGC",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.0359041205882091318812854296993, 6.1307955025492351097682330873795, 1.104199394646930620922375965165))) : (ye(K*phi_cea(t, 6.0359041205882091318812854296993, 6.1307955025492351097682330873795, 1.104199394646930620922375965165))) w l dashtype 10 lt 10 ti "jupiter 2021-09-02 22:28:52.94 TAI, Sight was taken at MP",\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.0358988320332684907043585553765, 6.1760020468963015005670058599208, 1.1013011708027145019173076434527))) : (ye(K*phi_cea(t, 6.0358988320332684907043585553765, 6.1760020468963015005670058599208, 1.1013011708027145019173076434527))) w l dashtype 11 lt 11 ti "jupiter 2021-09-02 22:39:12.67 TAI, Sight was taken at MP",\
[0.:1.4002153882984569310821143517387 - epsilon] "+" u (xe(K*lambda_cea(t, 0.8032613841827620504432161396835, 4.3174550985202042596711180522107, 1.1768564562493768477224875823595))) : (ye(K*phi_cea(t, 0.8032613841827620504432161396835, 4.3174550985202042596711180522107, 1.1768564562493768477224875823595))) w l dashtype 12 lt 12 ti "capella 2021-09-03 22:55:03.877 TAI, Sight was taken at MP" ,\
[1.4002153882984569310821143517387 + epsilon:2.*pi] "+" u (xe(K*lambda_cea(t, 0.8032613841827620504432161396835, 4.3174550985202042596711180522107, 1.1768564562493768477224875823595))) : (ye(K*phi_cea(t, 0.8032613841827620504432161396835, 4.3174550985202042596711180522107, 1.1768564562493768477224875823595))) w l dashtype 12 lt 12 noti,\
[0.:2.*pi] "+" u (xe(K*lambda_cea(t, 6.2345210250870328749783766397741, 0.41282289834064428424298398567771, 0.98366606474770423851339273824124))) : (ye(K*phi_cea(t, 6.2345210250870328749783766397741, 0.41282289834064428424298398567771, 0.98366606474770423851339273824124))) w l dashtype 13 lt 13 ti "moon 2021-11-14 22:17:44 TAI, Sight was taken at MP",\
	"+" u (xe(K*(6.2410583415053171307818047353067))):(ye(K*(0.85264552071863697335629694862291))) w p lw 2 lt 1 ti "Centre Sportif Maryse Hilsz (MH)",\
"+" u (xe(K*(6.241171014205057154811129294103))):(ye(K*(0.85268850862179457195111353939865))) w p lw 2 lt 2 ti "Baby Gym Campo (BGC)",\
"+" u (xe(K*(6.2411274295520877686271887796465))):(ye(K*(0.8526832726340385359975471146754))) w p lw 2 lt 3 ti "My Place (MP)",\
"+" u (xe(K*(6.2422902501008055153874920506496))):(ye(K*(0.85244184447383042346757520135725))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2422003167585939920058990537655))):(ye(K*(0.85208343038951839254480091767618))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2399211108302612416309784748591))):(ye(K*(0.85183553084676610911429861516808))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2412962876513295995550834049936))):(ye(K*(0.85198555617148530316740107082296))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408823775337181061217961541843))):(ye(K*(0.8519405456095835438290464480815))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2432352745298658192041330039501))):(ye(K*(0.85219474858196986311043019668432))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2430155449234483455711597343907))):(ye(K*(0.85217118008082237690103966087918))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.242973277293738298965308786137))):(ye(K*(0.85216664236528449904994886310305))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2403504161651470738547686778475))):(ye(K*(0.85188251413121096611291704903124))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2422969255697990931253116286825))):(ye(K*(0.85246841515905968922339752680273))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2399539709096361050910672929604))):(ye(K*(0.85213982192985904262627627758775))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413060054325546488485088048037))):(ye(K*(0.85232994275981754928039890728542))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408830265891515054477167723235))):(ye(K*(0.85227061135783088730022427625954))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2422262199645928149038809351623))):(ye(K*(0.85245855901082390193579385595513))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2424313192042344411447629681788))):(ye(K*(0.85248713891867999858931170820142))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2423707696491801399929499893915))):(ye(K*(0.85247870480933396475364816069487))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2409582149039204423957016842905))):(ye(K*(0.85228116784162810670721910355496))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2423171358161306798706391418818))):(ye(K*(0.85254883099921896505435370272608))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2423077109558366970532006234862))):(ye(K*(0.85251133504930731721316305993241))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2422989018992183218870195560157))):(ye(K*(0.85247628075641646017146513258922))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2422904214193213334738175035454))):(ye(K*(0.85244252643839713012852143947384))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2425049235656935309179971227422))):(ye(K*(0.85329403055614350126489853209932))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2423927369215155280812723503914))):(ye(K*(0.85284927311965141871752393853967))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2400492575349515433913438755553))):(ye(K*(0.85302476801103410686266670381883))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2401248432749616412706927803811))):(ye(K*(0.85372949932988284604817863510107))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2401154893139123558398750901688))):(ye(K*(0.85364215357464412470278602995677))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2400097827751723755795865145046))):(ye(K*(0.85265769159224868989355172743672))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2399981411096021588491566944867))):(ye(K*(0.85254956183172669881287220050581))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2398937783532426593069430964533))):(ye(K*(0.8515827701694709261914795206394))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2399216443747427263133431551978))):(ye(K*(0.85184046796988144301110423839418))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413162350526203425715721095912))):(ye(K*(0.85269572689114558894374340525246))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413269619482729666515297139995))):(ye(K*(0.85308298784369429590412892139284))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413251969565504140291523071937))):(ye(K*(0.85301900349842485482554366171826))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413123089388893305340388906188))):(ye(K*(0.85255493827486084068567606664146))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413104582894263216985564213246))):(ye(K*(0.8524887488763326359730854164809))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413111219964134690485479950439))):(ye(K*(0.85251247392481699360899938255898))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413081830180923148532201594207))):(ye(K*(0.85240752432296285068247243543738))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408838977946610171443353465293))):(ye(K*(0.85280816013864546576428438129369))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408845141446152027242533222307))):(ye(K*(0.85332119296412944908780673358706))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408844372737721784005771041848))):(ye(K*(0.8532462934096082252111159505148))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408835702670168998906774504576))):(ye(K*(0.85258889771191659345817015491775))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408834408462166010167493368499))):(ye(K*(0.85250867335348179398835100073484))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408829548160431599512776301708))):(ye(K*(0.85223182441827993738314717120375))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2408829586773872932781159761362))):(ye(K*(0.852233894764220178963398666383))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2415127459265526965737080899999))):(ye(K*(0.85264457006012295270380718648084))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.24174265301912978287646183162))):(ye(K*(0.85258467775719870562767255250947))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2424779711727635955753612506669))):(ye(K*(0.85246192769403661415594797290396))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.242535450668740715229887427995))):(ye(K*(0.85243086064294171233512997787329))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.241796054727637432790743332589))):(ye(K*(0.85283011616729642589973536814796))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2420322999338662128820942598395))):(ye(K*(0.8527026391563932161687944244477))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2423894762332219343647921050433))):(ye(K*(0.85246902382827327571135356265586))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2424558819238642470850209065247))):(ye(K*(0.85243465364954984497813939015032))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2417497593613067152773510315455))):(ye(K*(0.85279980149209477779947974340757))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2419794279984897045210345822852))):(ye(K*(0.85268111497920506813841257098829))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2413690550501010889661301916931))):(ye(K*(0.8525504334480231705128971952945))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.241611362148934638582886691438))):(ye(K*(0.85253117118946786234801038517617))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2412772851046893762827494356316))):(ye(K*(0.85249030144068893566355882285279))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2414870133126933993139573431108))):(ye(K*(0.85248047241953395225522172040655))) w p lw 2 lt 1linecolor rgb "gray" noti,\
"+" u (xe(K*(6.2414591164125203803791919199284))):(ye(K*(0.85252685600263600207426861743443))) w p lw 2 lt 62 ti "astronomical position"


	#coastlines
	number_of_lines_map_conv_selected = system("wc -l < /Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt")
	if(number_of_lines_map_conv_selected != 0){
			plot   '/Users/mcastellana/Documents/navigational_astronomy_large_files/coastlines_2/map_conv_selected.txt' u (xe($2)):(ye($1)) w d linecolor rgb "black" noti
	}


	x_max_old = GPVAL_X_MAX;

        set print "boundary.txt";
	print "GPVAL_X_MIN = ", GPVAL_X_MIN, "\n", "GPVAL_X_MAX = ", GPVAL_X_MAX, "\n", "GPVAL_Y_MIN = ", GPVAL_Y_MIN, "\n", "GPVAL_Y_MAX = ", GPVAL_Y_MAX, "\n", "minimal longitude = ", label_deg_min_c_lib(lambda_min), "\n", "maximal longitude = ", label_deg_min_c_lib(lambda_max), "\n", "minimal latitude = ", label_deg_min_c_lib(phi_min), "\n", "maximal latitude = ", label_deg_min_c_lib(phi_max), "\n";
	unset print;
	system("chmod 777 boundary.txt");

	}


    	pause 1e-1      # waiting time in seconds
}
